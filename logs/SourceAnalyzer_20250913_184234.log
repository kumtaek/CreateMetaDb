2025-09-13 18:42:34,658 - SourceAnalyzer - INFO - logger.py:68 - SourceAnalyzer 시작
2025-09-13 18:42:34,664 - SourceAnalyzer - DEBUG - logger.py:64 - 명령행 인자 파싱 완료: {'project_name': 'sampleSrc', 'clear_metadb': False, 'verbose': False, 'output_format': 'html', 'config_file': None, 'log_level': 'INFO', 'dry_run': False, 'force': False}
2025-09-13 18:42:34,664 - SourceAnalyzer - DEBUG - logger.py:64 - 인자 검증 성공
2025-09-13 18:42:34,664 - SourceAnalyzer - INFO - logger.py:68 - 분석 대상 프로젝트: sampleSrc
2025-09-13 18:42:34,664 - SourceAnalyzer - INFO - logger.py:68 - 분석 옵션:
2025-09-13 18:42:34,664 - SourceAnalyzer - INFO - logger.py:68 -   - 메타데이터베이스 초기화: False
2025-09-13 18:42:34,665 - SourceAnalyzer - INFO - logger.py:68 -   - 상세 로그: False
2025-09-13 18:42:34,665 - SourceAnalyzer - INFO - logger.py:68 -   - 출력 형식: html
2025-09-13 18:42:34,665 - SourceAnalyzer - INFO - logger.py:68 -   - 드라이런 모드: False
2025-09-13 18:42:34,665 - SourceAnalyzer - INFO - logger.py:68 -   - 강제 실행: False
2025-09-13 18:42:34,665 - SourceAnalyzer - INFO - logger.py:68 - 1단계 실행: 파일 정보 저장 (프로젝트 전체 스캔)
2025-09-13 18:42:34,666 - SourceAnalyzer - INFO - logger.py:68 - === 파일 스캔 시작: 파일 정보 저장 ===
2025-09-13 18:42:34,667 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_projects_01 ON projects (pr...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_tables_01 ON tables (table_...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_columns_01 ON columns (tabl...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_files_01 ON files (file_nam...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_classes_01 ON classes (clas...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE INDEX ix_classes_02 ON classes (parent_clas...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_components_01 ON components...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE INDEX ix_components_parent_id ON components...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 인덱스가 이미 존재함 (무시): CREATE UNIQUE INDEX ix_relationships_01 ON relatio...
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 스크립트 실행 성공: D:\Analyzer\CreateMetaDb\database\create_table_script.sql
2025-09-13 18:42:34,668 - SourceAnalyzer - INFO - logger.py:68 - 메타데이터베이스 초기화 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,668 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM pro...
2025-09-13 18:42:34,669 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE projects
            SET hash_..., 영향받은 행: 1
2025-09-13 18:42:34,670 - SourceAnalyzer - DEBUG - logger.py:64 - 프로젝트 정보 저장/업데이트 완료: sampleSrc
2025-09-13 18:42:34,670 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 파일 스캔 시작: D:\Analyzer\CreateMetaDb\projects\sampleSrc
2025-09-13 18:42:34,688 - SourceAnalyzer - DEBUG - logger.py:64 - 디렉토리 스캔 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc, 파일 수: 42
2025-09-13 18:42:34,689 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,694 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,697 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,701 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,702 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,705 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,706 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,710 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,711 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,715 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,716 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,720 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,721 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,725 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,725 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,730 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,731 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,735 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,735 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,739 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,740 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,744 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,745 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,749 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,750 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,754 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,754 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,758 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,759 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,763 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,764 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,767 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,768 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,772 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,773 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,777 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,778 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,782 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,782 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,786 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,787 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,791 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,791 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,795 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,796 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,800 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,801 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,805 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,806 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,810 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,810 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,814 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,815 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,819 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,820 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,824 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,824 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,829 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,830 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,834 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,834 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,838 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,839 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,843 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,844 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,848 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,848 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,852 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\config\target_source_config.yaml
2025-09-13 18:42:34,853 - SourceAnalyzer - INFO - logger.py:68 - 파일 스캔 완료: 총 35개 파일
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: SELECT project_id FROM projects WHERE project_name...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,853 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,854 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,855 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,856 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT COUNT(*) as count FROM fil...
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE files
            SET file_typ..., 영향받은 행: 1
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - 파일 정보 저장 완료: 35개 파일
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: UPDATE projects SET total_files = ? WHERE project_..., 영향받은 행: 1
2025-09-13 18:42:34,857 - SourceAnalyzer - DEBUG - logger.py:64 - 프로젝트 총 파일 수 업데이트: 35
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - === 파일 스캔 통계 ===
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - 총 파일 수: 35
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - 성공 스캔: 35
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - 오류 파일: 0
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - Java 파일: 19
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - XML 파일: 6
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - JSP 파일: 8
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - SQL 파일: 0
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - CSV 파일: 2
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - 기타 파일: 0
2025-09-13 18:42:34,857 - SourceAnalyzer - INFO - logger.py:68 - === 파일 스캔 완료 ===
2025-09-13 18:42:34,861 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 해제: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,861 - SourceAnalyzer - INFO - logger.py:68 - 1단계 완료: 파일 정보 저장
2025-09-13 18:42:34,861 - SourceAnalyzer - INFO - logger.py:68 - 2단계 실행: 데이터베이스 구조 저장 및 컴포넌트 생성
2025-09-13 18:42:34,861 - SourceAnalyzer - INFO - logger.py:68 - === 데이터베이스 로딩 시작: 데이터베이스 구조 저장 ===
2025-09-13 18:42:34,863 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,863 - SourceAnalyzer - INFO - logger.py:68 - 인코딩 문제 감지, 다른 인코딩으로 재시도: ALL_TABLES.csv
2025-09-13 18:42:34,863 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공 (cp949): D:\Analyzer\CreateMetaDb\projects\sampleSrc\db_schema\ALL_TABLES.csv
2025-09-13 18:42:34,864 - SourceAnalyzer - INFO - logger.py:68 - CSV 파일 로드 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc\db_schema\ALL_TABLES.csv, 16개 행
2025-09-13 18:42:34,864 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT f.file_id 
               ...
2025-09-13 18:42:34,865 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO tables (project..., 처리된 행: 16
2025-09-13 18:42:34,865 - SourceAnalyzer - INFO - logger.py:68 - 테이블 정보 저장 완료: 16개 테이블 (오류: 0개)
2025-09-13 18:42:34,865 - SourceAnalyzer - INFO - logger.py:68 - 인코딩 문제 감지, 다른 인코딩으로 재시도: ALL_TAB_COLUMNS.csv
2025-09-13 18:42:34,865 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공 (cp949): D:\Analyzer\CreateMetaDb\projects\sampleSrc\db_schema\ALL_TAB_COLUMNS.csv
2025-09-13 18:42:34,866 - SourceAnalyzer - INFO - logger.py:68 - CSV 파일 로드 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc\db_schema\ALL_TAB_COLUMNS.csv, 91개 행
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,866 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,867 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,868 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,869 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,870 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,871 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT t.table_id 
              ...
2025-09-13 18:42:34,871 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO columns (table_..., 처리된 행: 91
2025-09-13 18:42:34,871 - SourceAnalyzer - INFO - logger.py:68 - 컬럼 정보 저장 완료: 91개 컬럼 (오류: 0개)
2025-09-13 18:42:34,871 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT f.file_id 
               ...
2025-09-13 18:42:34,871 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT table_id, table_name, tabl...
2025-09-13 18:42:34,871 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO components (pro..., 처리된 행: 16
2025-09-13 18:42:34,871 - SourceAnalyzer - INFO - logger.py:68 - 테이블 컴포넌트 생성 완료: 16개
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
                UPDATE tables 
                SE..., 영향받은 행: 16
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 component_id 업데이트 완료
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT f.file_id 
               ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.column_id, c.column_name...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,872 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,873 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,874 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,875 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,876 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                    SELECT t.component_id 
      ...
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO components (pro..., 처리된 행: 91
2025-09-13 18:42:34,877 - SourceAnalyzer - INFO - logger.py:68 - 컬럼 컴포넌트 생성 완료: 91개
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,877 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,878 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,879 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,880 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,881 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT component_id FROM componen...
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,882 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,883 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,884 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,885 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,886 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE columns
            SET compon..., 영향받은 행: 1
2025-09-13 18:42:34,887 - SourceAnalyzer - INFO - logger.py:68 - 컬럼 component_id 업데이트 완료: 91개
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - === 데이터베이스 구조 저장 통계 ===
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - 테이블 로드: 16 (오류: 0)
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - 컬럼 로드: 91 (오류: 0)
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 생성: 107 (오류: 0)
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - inferred 컬럼 생성: 0
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - 오류 없이 완료
2025-09-13 18:42:34,888 - SourceAnalyzer - INFO - logger.py:68 - === 데이터베이스 로딩 완료 ===
2025-09-13 18:42:34,890 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 해제: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,890 - SourceAnalyzer - INFO - logger.py:68 - 2단계 완료: 데이터베이스 구조 저장 및 컴포넌트 생성
2025-09-13 18:42:34,890 - SourceAnalyzer - INFO - logger.py:68 - 3단계 실행: XML 파일 분석 및 SQL 컴포넌트 등록 + JOIN 관계 분석
2025-09-13 18:42:34,905 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: config/parser/sql_keyword.yaml
2025-09-13 18:42:34,927 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: config/parser/sql_keyword.yaml
2025-09-13 18:42:34,927 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: config/parser/xml_parser_config.yaml
2025-09-13 18:42:34,933 - SourceAnalyzer - DEBUG - logger.py:64 - YAML 설정 파일 로드 성공: config/parser/xml_parser_config.yaml
2025-09-13 18:42:34,935 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:34,935 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 스크립트 실행 성공: D:\Analyzer\CreateMetaDb\database\create_sql_content_db.sql
2025-09-13 18:42:34,935 - SourceAnalyzer - INFO - logger.py:68 - SQL Content 데이터베이스 초기화 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:34,936 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 시작: 3~4단계 통합 처리 ===
2025-09-13 18:42:34,937 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:34,937 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 초기화 시작
2025-09-13 18:42:34,938 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:34,938 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 스크립트 실행 성공: D:\Analyzer\CreateMetaDb\database\create_sql_content_db.sql
2025-09-13 18:42:34,938 - SourceAnalyzer - INFO - logger.py:68 - SQL Content 데이터베이스 초기화 완료: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:34,938 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id, file_path, file_n...
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\com\example\dynamicquery + UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml (ID: 5)
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\main\resources\mybatis\mapper + ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml (ID: 23)
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\main\resources\mybatis\mapper + ImplicitJoinTestMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml (ID: 24)
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\main\resources\mybatis\mapper + MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml (ID: 25)
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\main\resources\mybatis\mapper + ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml (ID: 26)
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - LOAD XML ID 매핑: src\main\resources\mybatis\mapper + UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml (ID: 27)
2025-09-13 18:42:34,939 - SourceAnalyzer - INFO - logger.py:68 - XML 파일 ID 매핑 로드 완료: 6개 파일
2025-09-13 18:42:34,939 - SourceAnalyzer - DEBUG - logger.py:64 - 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,939 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 초기화 완료
2025-09-13 18:42:34,940 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,941 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,941 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinTestMapper.xml
2025-09-13 18:42:34,941 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,942 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:34,942 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:34,942 - SourceAnalyzer - INFO - logger.py:68 - MyBatis XML 파일 수집 완료: 6개
2025-09-13 18:42:34,943 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,950 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,951 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,951 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,952 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,952 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,952 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,953 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 시작 ===
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 8개
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - XML에서 추출된 SQL 쿼리 타입별 통계: {'select': 8}
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor를 사용하여 처리 시작
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 전: sql_queries=8, project_id=1
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 시작 ===
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 8
2025-09-13 18:42:34,953 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 시작
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 길이: 8
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리: {'tag_name': 'select', 'query_id': 'findUsers', 'query_type': 'select', 'sql_content': '<select id="findUsers" parameterType="com.example.dynamicquery.UserSearchDto" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, u.EMAIL, u.STATUS, d.DEPT_NAME, p.PROFILE_IMAGE_URL, u.CREATED_AT FROM USERS u, DEPARTMENTS d, USER_PROFILES p <where> u.DEPT_ID = d.DEPT_ID AND u.USER_ID = p.USER_ID(+) <if test="searchKeyword != null and searchKeyword != \'\'"> AND (u.USER_NAME LIKE \'%\' || #{searchKeyword} || \'%\' OR u.EMAIL LIKE \'%\' || #{searchKeyword} || \'%\') </if> <if test="userStatus != null and userStatus != \'\'"> AND u.STATUS = #{userStatus} </if> <if test="deptName != null and deptName != \'\'"> AND d.DEPT_NAME LIKE \'%\' || #{deptName} || \'%\' </if> </where> <if test="sortOrder != null and sortOrder != \'\'"> ORDER BY u.CREATED_AT ${sortOrder} </if> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 14, 'line_end': 46, 'hash_value': '8577a33daac9cef838f957c5931b5de2'}
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 완료
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 시작
2025-09-13 18:42:34,954 - SourceAnalyzer - INFO - logger.py:68 - SQL 쿼리 타입별 통계: {'select': 8}
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 완료
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 크기: 8
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리 정보: {'tag_name': 'select', 'query_id': 'findUsers', 'query_type': 'select', 'sql_content': '<select id="findUsers" parameterType="com.example.dynamicquery.UserSearchDto" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, u.EMAIL, u.STATUS, d.DEPT_NAME, p.PROFILE_IMAGE_URL, u.CREATED_AT FROM USERS u, DEPARTMENTS d, USER_PROFILES p <where> u.DEPT_ID = d.DEPT_ID AND u.USER_ID = p.USER_ID(+) <if test="searchKeyword != null and searchKeyword != \'\'"> AND (u.USER_NAME LIKE \'%\' || #{searchKeyword} || \'%\' OR u.EMAIL LIKE \'%\' || #{searchKeyword} || \'%\') </if> <if test="userStatus != null and userStatus != \'\'"> AND u.STATUS = #{userStatus} </if> <if test="deptName != null and deptName != \'\'"> AND d.DEPT_NAME LIKE \'%\' || #{deptName} || \'%\' </if> </where> <if test="sortOrder != null and sortOrder != \'\'"> ORDER BY u.CREATED_AT ${sortOrder} </if> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 14, 'line_end': 46, 'hash_value': '8577a33daac9cef838f957c5931b5de2'}
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 모든 쿼리 정보: [{'tag_name': 'select', 'query_id': 'findUsers', 'query_type': 'select', 'sql_content': '<select id="findUsers" parameterType="com.example.dynamicquery.UserSearchDto" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, u.EMAIL, u.STATUS, d.DEPT_NAME, p.PROFILE_IMAGE_URL, u.CREATED_AT FROM USERS u, DEPARTMENTS d, USER_PROFILES p <where> u.DEPT_ID = d.DEPT_ID AND u.USER_ID = p.USER_ID(+) <if test="searchKeyword != null and searchKeyword != \'\'"> AND (u.USER_NAME LIKE \'%\' || #{searchKeyword} || \'%\' OR u.EMAIL LIKE \'%\' || #{searchKeyword} || \'%\') </if> <if test="userStatus != null and userStatus != \'\'"> AND u.STATUS = #{userStatus} </if> <if test="deptName != null and deptName != \'\'"> AND d.DEPT_NAME LIKE \'%\' || #{deptName} || \'%\' </if> </where> <if test="sortOrder != null and sortOrder != \'\'"> ORDER BY u.CREATED_AT ${sortOrder} </if> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 14, 'line_end': 46, 'hash_value': '8577a33daac9cef838f957c5931b5de2'}, {'tag_name': 'select', 'query_id': 'findUsersWithAnsiJoin', 'query_type': 'select', 'sql_content': '<select id="findUsersWithAnsiJoin" parameterType="com.example.dynamicquery.UserSearchDto" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, u.EMAIL, u.STATUS, d.DEPT_NAME, p.PROFILE_IMAGE_URL, u.CREATED_AT FROM USERS u INNER JOIN DEPARTMENTS d ON u.DEPT_ID = d.DEPT_ID LEFT JOIN USER_PROFILES p ON u.USER_ID = p.USER_ID <where> <if test="searchKeyword != null and searchKeyword != \'\'"> AND (u.USER_NAME LIKE \'%\' || #{searchKeyword} || \'%\' OR u.EMAIL LIKE \'%\' || #{searchKeyword} || \'%\') </if> <if test="userStatus != null and userStatus != \'\'"> AND u.STATUS = #{userStatus} </if> <if test="deptName != null and deptName != \'\'"> AND d.DEPT_NAME LIKE \'%\' || #{deptName} || \'%\' </if> </where> <if test="sortOrder != null and sortOrder != \'\'"> ORDER BY u.CREATED_AT ${sortOrder} </if> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 50, 'line_end': 80, 'hash_value': '58448abb2d8b7329363ffd5e7db6c6a0'}, {'tag_name': 'select', 'query_id': 'findUsersWithAliasOmission', 'query_type': 'select', 'sql_content': '<select id="findUsersWithAliasOmission" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, d.DEPT_NAME, p.PROFILE_IMAGE_URL FROM USERS u, DEPARTMENTS d, USER_PROFILES p WHERE u.DEPT_ID = DEPT_ID -- d. 생략 AND u.USER_ID = USER_ID -- p. 생략 AND u.STATUS = \'ACTIVE\' </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 83, 'line_end': 100, 'hash_value': 'd736d0ed97e9cef1ee8db7f85ffab4a2'}, {'tag_name': 'select', 'query_id': 'findUsersWithMixedJoins', 'query_type': 'select', 'sql_content': '<select id="findUsersWithMixedJoins" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, d.DEPT_NAME, p.PROFILE_IMAGE_URL, ut.TYPE_NAME FROM USERS u, DEPARTMENTS d, USER_PROFILES p, USER_TYPES ut WHERE u.DEPT_ID = d.DEPT_ID -- 완전한 형태 AND u.USER_ID = USER_ID -- p. 생략 AND u.USER_TYPE = TYPE_CODE -- ut. 생략 AND u.STATUS = \'ACTIVE\' </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 103, 'line_end': 123, 'hash_value': '129ec8b5f1b603d1aea0ba3bd448cf84'}, {'tag_name': 'select', 'query_id': 'findComplexJoins', 'query_type': 'select', 'sql_content': '<select id="findComplexJoins" resultType="java.util.Map"> SELECT o.ORDER_ID, o.ORDER_DATE, c.CUSTOMER_NAME, p.PRODUCT_NAME, oi.QUANTITY, oi.UNIT_PRICE FROM ORDERS o, CUSTOMERS c, ORDER_ITEMS oi, PRODUCTS p WHERE o.CUSTOMER_ID = c.CUSTOMER_ID -- 완전한 형태 AND o.ORDER_ID = ORDER_ID -- oi. 생략 AND oi.PRODUCT_ID = p.PRODUCT_ID -- 완전한 형태 AND o.STATUS = \'COMPLETED\' </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 126, 'line_end': 147, 'hash_value': '2d93fc82695abe6b2ff4b30998667fd3'}, {'tag_name': 'select', 'query_id': 'findUsersWithScatteredConditions', 'query_type': 'select', 'sql_content': '<select id="findUsersWithScatteredConditions" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, d.DEPT_NAME, p.PROFILE_IMAGE_URL, ut.TYPE_NAME, r.ROLE_NAME FROM USERS u, DEPARTMENTS d, USER_PROFILES p, USER_TYPES ut, USER_ROLES ur, ROLES r WHERE u.STATUS = \'ACTIVE\' -- 일반 조건 AND u.DEPT_ID = d.DEPT_ID -- 조인 조건 1 AND u.USER_TYPE = \'PREMIUM\' -- 일반 조건 AND u.USER_ID = p.USER_ID -- 조인 조건 2 AND u.USER_TYPE = ut.TYPE_CODE -- 조인 조건 3 AND u.USER_ID = ur.USER_ID -- 조인 조건 4 AND ur.ROLE_ID = r.ROLE_ID -- 조인 조건 5 AND d.DEPT_STATUS = \'ACTIVE\' -- 일반 조건 </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 150, 'line_end': 177, 'hash_value': '884700525d7414389b68749e410ccfe0'}, {'tag_name': 'select', 'query_id': 'findOrdersWithScatteredJoins', 'query_type': 'select', 'sql_content': '<select id="findOrdersWithScatteredJoins" resultType="java.util.Map"> SELECT o.ORDER_ID, o.ORDER_DATE, c.CUSTOMER_NAME, c.EMAIL, p.PRODUCT_NAME, p.PRICE, oi.QUANTITY, oi.UNIT_PRICE, cat.CATEGORY_NAME, b.BRAND_NAME FROM ORDERS o, CUSTOMERS c, ORDER_ITEMS oi, PRODUCTS p, CATEGORIES cat, BRANDS b WHERE o.ORDER_DATE &gt;= \'2024-01-01\' -- 일반 조건 AND o.CUSTOMER_ID = c.CUSTOMER_ID -- 조인 조건 1 AND o.STATUS = \'COMPLETED\' -- 일반 조건 AND o.ORDER_ID = oi.ORDER_ID -- 조인 조건 2 AND oi.PRODUCT_ID = p.PRODUCT_ID -- 조인 조건 3 AND p.CATEGORY_ID = cat.CATEGORY_ID -- 조인 조건 4 AND p.BRAND_ID = b.BRAND_ID -- 조인 조건 5 AND oi.QUANTITY &gt; 1 -- 일반 조건 AND p.STATUS = \'ACTIVE\' -- 일반 조건 AND cat.CATEGORY_STATUS = \'ACTIVE\' -- 일반 조건 </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 180, 'line_end': 213, 'hash_value': '72b53996bb726d19f2fba5df0c3a8c8d'}, {'tag_name': 'select', 'query_id': 'findComplexScatteredJoins', 'query_type': 'select', 'sql_content': '<select id="findComplexScatteredJoins" resultType="java.util.Map"> SELECT u.USER_ID, u.USER_NAME, d.DEPT_NAME, p.PROFILE_IMAGE_URL, ut.TYPE_NAME, COUNT(o.ORDER_ID) as ORDER_COUNT, SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT FROM USERS u, DEPARTMENTS d, USER_PROFILES p, USER_TYPES ut, ORDERS o, CUSTOMERS c WHERE u.USER_ID IN (SELECT USER_ID FROM USER_ACTIVITY_LOG WHERE ACTIVITY_DATE &gt;= \'2024-01-01\') -- 서브쿼리 AND u.DEPT_ID = d.DEPT_ID -- 조인 조건 1 AND u.USER_ID = p.USER_ID -- 조인 조건 2 AND u.USER_TYPE = ut.TYPE_CODE -- 조인 조건 3 AND u.USER_ID = c.USER_ID -- 조인 조건 4 AND c.CUSTOMER_ID = o.CUSTOMER_ID -- 조인 조건 5 AND o.ORDER_DATE &gt;= \'2024-01-01\' -- 일반 조건 AND u.STATUS = \'ACTIVE\' -- 일반 조건 AND d.DEPT_STATUS = \'ACTIVE\' -- 일반 조건 GROUP BY u.USER_ID, u.USER_NAME, d.DEPT_NAME, p.PROFILE_IMAGE_URL, ut.TYPE_NAME HAVING COUNT(o.ORDER_ID) &gt; 5 -- 그룹 조건 </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\com\\example\\dynamicquery\\UserMapper.xml', 'line_start': 216, 'line_end': 248, 'hash_value': '2dbc9aa1ab7397fcac3b6b2e02f4f651'}]
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작 전
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 1/8
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findUsers (select)
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findUsers (select) -> SQL_SELECT
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findUsers', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 14, 'line_end': 46, 'hash_value': '8577a33daac9cef838f957c5931b5de2', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findUsers (SQL_SELECT)
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,954 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findUsers', 5)
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findUsers', None, 'SQL', 5, 14, 46, '8577a33daac9cef838f957c5931b5de2', 'N', None, 'N')
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 215
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findUsers (ID: 215)
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 215
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findUsers (component_id: 215)
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,955 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findUsers - 'sql_query'
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findUsers
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 2/8
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findUsersWithAnsiJoin (select)
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findUsersWithAnsiJoin (select) -> SQL_SELECT
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findUsersWithAnsiJoin', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 50, 'line_end': 80, 'hash_value': '58448abb2d8b7329363ffd5e7db6c6a0', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findUsersWithAnsiJoin (SQL_SELECT)
2025-09-13 18:42:34,955 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findUsersWithAnsiJoin', 5)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findUsersWithAnsiJoin', None, 'SQL', 5, 50, 80, '58448abb2d8b7329363ffd5e7db6c6a0', 'N', None, 'N')
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 216
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findUsersWithAnsiJoin (ID: 216)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 216
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findUsersWithAnsiJoin (component_id: 216)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,956 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findUsersWithAnsiJoin - 'sql_query'
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findUsersWithAnsiJoin
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 3/8
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findUsersWithAliasOmission (select)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findUsersWithAliasOmission (select) -> SQL_SELECT
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findUsersWithAliasOmission', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 83, 'line_end': 100, 'hash_value': 'd736d0ed97e9cef1ee8db7f85ffab4a2', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findUsersWithAliasOmission (SQL_SELECT)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findUsersWithAliasOmission', 5)
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findUsersWithAliasOmission', None, 'SQL', 5, 83, 100, 'd736d0ed97e9cef1ee8db7f85ffab4a2', 'N', None, 'N')
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 217
2025-09-13 18:42:34,956 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findUsersWithAliasOmission (ID: 217)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 217
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findUsersWithAliasOmission (component_id: 217)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,957 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findUsersWithAliasOmission - 'sql_query'
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findUsersWithAliasOmission
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 4/8
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findUsersWithMixedJoins (select)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findUsersWithMixedJoins (select) -> SQL_SELECT
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findUsersWithMixedJoins', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 103, 'line_end': 123, 'hash_value': '129ec8b5f1b603d1aea0ba3bd448cf84', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findUsersWithMixedJoins (SQL_SELECT)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findUsersWithMixedJoins', 5)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findUsersWithMixedJoins', None, 'SQL', 5, 103, 123, '129ec8b5f1b603d1aea0ba3bd448cf84', 'N', None, 'N')
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 218
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findUsersWithMixedJoins (ID: 218)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 218
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findUsersWithMixedJoins (component_id: 218)
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,957 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findUsersWithMixedJoins - 'sql_query'
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findUsersWithMixedJoins
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 5/8
2025-09-13 18:42:34,957 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findComplexJoins (select)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findComplexJoins (select) -> SQL_SELECT
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findComplexJoins', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 126, 'line_end': 147, 'hash_value': '2d93fc82695abe6b2ff4b30998667fd3', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findComplexJoins (SQL_SELECT)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findComplexJoins', 5)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findComplexJoins', None, 'SQL', 5, 126, 147, '2d93fc82695abe6b2ff4b30998667fd3', 'N', None, 'N')
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 219
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findComplexJoins (ID: 219)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 219
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findComplexJoins (component_id: 219)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,958 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findComplexJoins - 'sql_query'
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findComplexJoins
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 6/8
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findUsersWithScatteredConditions (select)
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findUsersWithScatteredConditions (select) -> SQL_SELECT
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,958 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findUsersWithScatteredConditions', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 150, 'line_end': 177, 'hash_value': '884700525d7414389b68749e410ccfe0', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findUsersWithScatteredConditions (SQL_SELECT)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findUsersWithScatteredConditions', 5)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findUsersWithScatteredConditions', None, 'SQL', 5, 150, 177, '884700525d7414389b68749e410ccfe0', 'N', None, 'N')
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 220
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findUsersWithScatteredConditions (ID: 220)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 220
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findUsersWithScatteredConditions (component_id: 220)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,959 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findUsersWithScatteredConditions - 'sql_query'
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findUsersWithScatteredConditions
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 7/8
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findOrdersWithScatteredJoins (select)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findOrdersWithScatteredJoins (select) -> SQL_SELECT
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findOrdersWithScatteredJoins', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 180, 'line_end': 213, 'hash_value': '72b53996bb726d19f2fba5df0c3a8c8d', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findOrdersWithScatteredJoins (SQL_SELECT)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findOrdersWithScatteredJoins', 5)
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findOrdersWithScatteredJoins', None, 'SQL', 5, 180, 213, '72b53996bb726d19f2fba5df0c3a8c8d', 'N', None, 'N')
2025-09-13 18:42:34,959 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 221
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findOrdersWithScatteredJoins (ID: 221)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 221
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findOrdersWithScatteredJoins (component_id: 221)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,960 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findOrdersWithScatteredJoins - 'sql_query'
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findOrdersWithScatteredJoins
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 8/8
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: findComplexScatteredJoins (select)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\com\example\dynamicquery\UserMapper.xml -> src/com/example/dynamicquery/UserMapper.xml
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/com/example/dynamicquery/UserMapper.xml -> 5
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 5
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: findComplexScatteredJoins (select) -> SQL_SELECT
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'findComplexScatteredJoins', 'parent_id': None, 'layer': 'SQL', 'file_id': 5, 'line_start': 216, 'line_end': 248, 'hash_value': '2dbc9aa1ab7397fcac3b6b2e02f4f651', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: findComplexScatteredJoins (SQL_SELECT)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'findComplexScatteredJoins', 5)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'findComplexScatteredJoins', None, 'SQL', 5, 216, 248, '2dbc9aa1ab7397fcac3b6b2e02f4f651', 'N', None, 'N')
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 222
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: findComplexScatteredJoins (ID: 222)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 222
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: findComplexScatteredJoins (component_id: 222)
2025-09-13 18:42:34,960 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/com/example/dynamicquery
2025-09-13 18:42:34,960 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): findComplexScatteredJoins - 'sql_query'
2025-09-13 18:42:34,961 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: findComplexScatteredJoins
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 완료 ===
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - 처리된 쿼리 수: 8
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - 건너뜀 쿼리 수: 0
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 ID 매핑 크기: 8
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - SQL 컴포넌트 저장 완료: 8개 (건너뜀: 0개)
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 후: result=True
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 처리 결과: True
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 완료 ===
2025-09-13 18:42:34,961 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,961 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: DEPARTMENTS
2025-09-13 18:42:34,961 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,961 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,962 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'DEPARTMENTS', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'DEPARTMENTS', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,962 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 33
2025-09-13 18:42:34,962 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'DEPARTMENTS', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'DEPARTMENTS', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: DEPARTMENTS (TABLE)
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'DEPARTMENTS', 5)
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'DEPARTMENTS', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,962 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 223
2025-09-13 18:42:34,962 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 223
2025-09-13 18:42:34,962 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=223, table_id=33
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 DEPARTMENTS에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: DEPARTMENTS, component_id: 223
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: DEPARTMENTS (ID: 223)
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: P
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,964 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'P', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,964 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'P', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 34
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'P', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'P', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: P (TABLE)
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'P', 5)
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'P', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 224
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 224
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=224, table_id=34
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 P에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: P, component_id: 224
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: P (ID: 224)
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,965 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: USER_PROFILES
2025-09-13 18:42:34,965 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'USER_PROFILES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'USER_PROFILES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 35
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_PROFILES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_PROFILES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: USER_PROFILES (TABLE)
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'USER_PROFILES', 5)
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'USER_PROFILES', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 225
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 225
2025-09-13 18:42:34,966 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=225, table_id=35
2025-09-13 18:42:34,966 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,967 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 USER_PROFILES에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,967 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: USER_PROFILES, component_id: 225
2025-09-13 18:42:34,967 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: USER_PROFILES (ID: 225)
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,967 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO relationships (..., 처리된 행: 6
2025-09-13 18:42:34,967 - SourceAnalyzer - INFO - logger.py:68 - JOIN 관계 저장 완료: 6개
2025-09-13 18:42:34,968 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,968 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,969 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,969 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,969 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 시작 ===
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 5개
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - XML에서 추출된 SQL 쿼리 타입별 통계: {'select': 5}
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor를 사용하여 처리 시작
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 전: sql_queries=5, project_id=1
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 시작 ===
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 5
2025-09-13 18:42:34,970 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,970 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 시작
2025-09-13 18:42:34,970 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,970 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 길이: 5
2025-09-13 18:42:34,970 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리: {'tag_name': 'select', 'query_id': 'getUsersWithTypes', 'query_type': 'select', 'sql_content': '<select id="getUsersWithTypes" resultType="com.example.model.UserWithType"> SELECT u.id, u.name, u.email, ut.type_name FROM users u, user_types ut WHERE u.type_id = ut.id ORDER BY u.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 9, 'line_end': 17, 'hash_value': 'a94c5784e100aafd6b1fb72156be5b8a'}
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 완료
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 시작
2025-09-13 18:42:34,971 - SourceAnalyzer - INFO - logger.py:68 - SQL 쿼리 타입별 통계: {'select': 5}
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 완료
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 크기: 5
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리 정보: {'tag_name': 'select', 'query_id': 'getUsersWithTypes', 'query_type': 'select', 'sql_content': '<select id="getUsersWithTypes" resultType="com.example.model.UserWithType"> SELECT u.id, u.name, u.email, ut.type_name FROM users u, user_types ut WHERE u.type_id = ut.id ORDER BY u.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 9, 'line_end': 17, 'hash_value': 'a94c5784e100aafd6b1fb72156be5b8a'}
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 모든 쿼리 정보: [{'tag_name': 'select', 'query_id': 'getUsersWithTypes', 'query_type': 'select', 'sql_content': '<select id="getUsersWithTypes" resultType="com.example.model.UserWithType"> SELECT u.id, u.name, u.email, ut.type_name FROM users u, user_types ut WHERE u.type_id = ut.id ORDER BY u.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 9, 'line_end': 17, 'hash_value': 'a94c5784e100aafd6b1fb72156be5b8a'}, {'tag_name': 'select', 'query_id': 'getProductsWithCategoryAndBrand', 'query_type': 'select', 'sql_content': '<select id="getProductsWithCategoryAndBrand" resultType="com.example.model.ProductDetail"> SELECT p.id, p.name, p.price, c.category_name, b.brand_name FROM products p, categories c, brands b WHERE p.category_id = c.id AND p.brand_id = b.id AND p.status = \'ACTIVE\' ORDER BY p.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 17, 'line_end': 27, 'hash_value': '8e85be2c0dd94f869785211abfc65045'}, {'tag_name': 'select', 'query_id': 'getOrdersWithUsers', 'query_type': 'select', 'sql_content': '<select id="getOrdersWithUsers" resultType="com.example.model.OrderWithUser"> SELECT o.id AS order_id, o.order_date, u.name AS user_name, u.email FROM orders ord_alias, users user_alias WHERE ord_alias.user_id = user_alias.id AND ord_alias.status = \'COMPLETED\' ORDER BY ord_alias.order_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 27, 'line_end': 36, 'hash_value': '049017f94108488f97c2fd0f4205086c'}, {'tag_name': 'select', 'query_id': 'getComplexJoin', 'query_type': 'select', 'sql_content': '<select id="getComplexJoin" resultType="com.example.model.ComplexResult"> SELECT u.name, ut.type_name, p.name AS product_name, c.category_name FROM users u, user_types ut, products p, categories c WHERE u.type_id = ut.id AND p.category_id = c.id AND u.created_date &gt; #{startDate} AND p.status = \'ACTIVE\' ORDER BY u.name, p.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 36, 'line_end': 47, 'hash_value': '38a990473cec4b436ff797a60b659daa'}, {'tag_name': 'select', 'query_id': 'getMixedJoin', 'query_type': 'select', 'sql_content': '<select id="getMixedJoin" resultType="com.example.model.MixedResult"> SELECT u.name, ut.type_name, r.role_name, p.name AS product_name FROM users u, user_types ut LEFT JOIN user_roles ur ON u.id = ur.user_id LEFT JOIN roles r ON ur.role_id = r.id INNER JOIN products p ON p.created_by = u.id WHERE u.type_id = ut.id AND u.status = \'ACTIVE\' ORDER BY u.name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ImplicitJoinMapper.xml', 'line_start': 47, 'line_end': 58, 'hash_value': '1a58c39177caecd570ff4427481f49f7'}]
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작 전
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 1/5
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUsersWithTypes (select)
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml -> 23
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 23
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUsersWithTypes (select) -> SQL_SELECT
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUsersWithTypes', 'parent_id': None, 'layer': 'SQL', 'file_id': 23, 'line_start': 9, 'line_end': 17, 'hash_value': 'a94c5784e100aafd6b1fb72156be5b8a', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,971 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUsersWithTypes (SQL_SELECT)
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUsersWithTypes', 23)
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUsersWithTypes', None, 'SQL', 23, 9, 17, 'a94c5784e100aafd6b1fb72156be5b8a', 'N', None, 'N')
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 226
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUsersWithTypes (ID: 226)
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 226
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUsersWithTypes (component_id: 226)
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,972 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUsersWithTypes - 'sql_query'
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUsersWithTypes
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 2/5
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getProductsWithCategoryAndBrand (select)
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml -> 23
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 23
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getProductsWithCategoryAndBrand (select) -> SQL_SELECT
2025-09-13 18:42:34,972 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getProductsWithCategoryAndBrand', 'parent_id': None, 'layer': 'SQL', 'file_id': 23, 'line_start': 17, 'line_end': 27, 'hash_value': '8e85be2c0dd94f869785211abfc65045', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getProductsWithCategoryAndBrand (SQL_SELECT)
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getProductsWithCategoryAndBrand', 23)
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getProductsWithCategoryAndBrand', None, 'SQL', 23, 17, 27, '8e85be2c0dd94f869785211abfc65045', 'N', None, 'N')
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 227
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getProductsWithCategoryAndBrand (ID: 227)
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 227
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getProductsWithCategoryAndBrand (component_id: 227)
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,973 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getProductsWithCategoryAndBrand - 'sql_query'
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getProductsWithCategoryAndBrand
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 3/5
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getOrdersWithUsers (select)
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml -> 23
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 23
2025-09-13 18:42:34,973 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getOrdersWithUsers (select) -> SQL_SELECT
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getOrdersWithUsers', 'parent_id': None, 'layer': 'SQL', 'file_id': 23, 'line_start': 27, 'line_end': 36, 'hash_value': '049017f94108488f97c2fd0f4205086c', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getOrdersWithUsers (SQL_SELECT)
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getOrdersWithUsers', 23)
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getOrdersWithUsers', None, 'SQL', 23, 27, 36, '049017f94108488f97c2fd0f4205086c', 'N', None, 'N')
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 228
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getOrdersWithUsers (ID: 228)
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 228
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getOrdersWithUsers (component_id: 228)
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,974 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getOrdersWithUsers - 'sql_query'
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getOrdersWithUsers
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 4/5
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getComplexJoin (select)
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml
2025-09-13 18:42:34,974 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml -> 23
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 23
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getComplexJoin (select) -> SQL_SELECT
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getComplexJoin', 'parent_id': None, 'layer': 'SQL', 'file_id': 23, 'line_start': 36, 'line_end': 47, 'hash_value': '38a990473cec4b436ff797a60b659daa', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getComplexJoin (SQL_SELECT)
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getComplexJoin', 23)
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getComplexJoin', None, 'SQL', 23, 36, 47, '38a990473cec4b436ff797a60b659daa', 'N', None, 'N')
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 229
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getComplexJoin (ID: 229)
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 229
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getComplexJoin (component_id: 229)
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,975 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getComplexJoin - 'sql_query'
2025-09-13 18:42:34,975 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getComplexJoin
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 5/5
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getMixedJoin (select)
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinMapper.xml -> src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml -> 23
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 23
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getMixedJoin (select) -> SQL_SELECT
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getMixedJoin', 'parent_id': None, 'layer': 'SQL', 'file_id': 23, 'line_start': 47, 'line_end': 58, 'hash_value': '1a58c39177caecd570ff4427481f49f7', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getMixedJoin (SQL_SELECT)
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getMixedJoin', 23)
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getMixedJoin', None, 'SQL', 23, 47, 58, '1a58c39177caecd570ff4427481f49f7', 'N', None, 'N')
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 230
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getMixedJoin (ID: 230)
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 230
2025-09-13 18:42:34,976 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getMixedJoin (component_id: 230)
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,977 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getMixedJoin - 'sql_query'
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getMixedJoin
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 완료 ===
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - 처리된 쿼리 수: 5
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - 건너뜀 쿼리 수: 0
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 ID 매핑 크기: 5
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - SQL 컴포넌트 저장 완료: 5개 (건너뜀: 0개)
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 후: result=True
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 처리 결과: True
2025-09-13 18:42:34,977 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 완료 ===
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,977 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: B
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'B', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'B', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 36
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'B', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'B', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: B (TABLE)
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'B', 5)
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'B', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 231
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 231
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=231, table_id=36
2025-09-13 18:42:34,978 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,978 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 B에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: B, component_id: 231
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: B (ID: 231)
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: C
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'C', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'C', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 37
2025-09-13 18:42:34,979 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'C', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'C', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: C (TABLE)
2025-09-13 18:42:34,979 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'C', 5)
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'C', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 232
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 232
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=232, table_id=37
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 C에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: C, component_id: 232
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: C (ID: 232)
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: USER_ROLES
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'USER_ROLES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,980 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'USER_ROLES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,980 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 38
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_ROLES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_ROLES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: USER_ROLES (TABLE)
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'USER_ROLES', 5)
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'USER_ROLES', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 233
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 233
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=233, table_id=38
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 USER_ROLES에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: USER_ROLES, component_id: 233
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: USER_ROLES (ID: 233)
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: ROLES
2025-09-13 18:42:34,981 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,981 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'ROLES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'ROLES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 39
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'ROLES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'ROLES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: ROLES (TABLE)
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'ROLES', 5)
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'ROLES', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 234
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 234
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=234, table_id=39
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,982 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 ROLES에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,982 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: ROLES, component_id: 234
2025-09-13 18:42:34,983 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: ROLES (ID: 234)
2025-09-13 18:42:34,983 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,983 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,983 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,983 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,983 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO relationships (..., 처리된 행: 10
2025-09-13 18:42:34,983 - SourceAnalyzer - INFO - logger.py:68 - JOIN 관계 저장 완료: 10개
2025-09-13 18:42:34,983 - SourceAnalyzer - WARNING - logger.py:72 - XML 파싱 오류: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinTestMapper.xml - not well-formed (invalid token): line 190, column 37
2025-09-13 18:42:34,983 - SourceAnalyzer - WARNING - logger.py:72 - XML 파싱 에러로 건너뜀: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ImplicitJoinTestMapper.xml - XML 파싱 오류: not well-formed (invalid token): line 190, column 37
2025-09-13 18:42:34,984 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,984 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,985 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,985 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,985 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,986 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,986 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,986 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,987 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,987 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,987 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,987 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 시작 ===
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 12개
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - XML에서 추출된 SQL 쿼리 타입별 통계: {'select': 9, 'insert': 1, 'update': 1, 'delete': 1}
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor를 사용하여 처리 시작
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 전: sql_queries=12, project_id=1
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 시작 ===
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 12
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 시작
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 길이: 12
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리: {'tag_name': 'select', 'query_id': 'selectAll', 'query_type': 'select', 'sql_content': '<select id="selectAll" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users ORDER BY create_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 9, 'line_end': 16, 'hash_value': '82eaa39215d59ed1339da4c09a85b5ae'}
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 완료
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 시작
2025-09-13 18:42:34,988 - SourceAnalyzer - INFO - logger.py:68 - SQL 쿼리 타입별 통계: {'select': 9, 'insert': 1, 'update': 1, 'delete': 1}
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 완료
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 크기: 12
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:34,988 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리 정보: {'tag_name': 'select', 'query_id': 'selectAll', 'query_type': 'select', 'sql_content': '<select id="selectAll" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users ORDER BY create_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 9, 'line_end': 16, 'hash_value': '82eaa39215d59ed1339da4c09a85b5ae'}
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 모든 쿼리 정보: [{'tag_name': 'select', 'query_id': 'selectAll', 'query_type': 'select', 'sql_content': '<select id="selectAll" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users ORDER BY create_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 9, 'line_end': 16, 'hash_value': '82eaa39215d59ed1339da4c09a85b5ae'}, {'tag_name': 'select', 'query_id': 'selectById', 'query_type': 'select', 'sql_content': '<select id="selectById" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 16, 'line_end': 23, 'hash_value': 'eb71f43588a3712f3ee5d759903a5d2a'}, {'tag_name': 'select', 'query_id': 'selectByName', 'query_type': 'select', 'sql_content': '<select id="selectByName" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users WHERE name LIKE #{name} <if test="status != null"> AND status = #{status} </if> AND active_flag = \'Y\' ORDER BY name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 23, 'line_end': 37, 'hash_value': 'f4cb308d088517f5e5b4034beedadd81'}, {'tag_name': 'insert', 'query_id': 'insert', 'query_type': 'insert', 'sql_content': '<insert id="insert" parameterType="com.example.model.User"> INSERT INTO users (name, email, create_date) VALUES (#{name}, #{email}, #{createDate}) </insert>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 37, 'line_end': 43, 'hash_value': 'e4acf60db7336a763d4ad40dbffe03c8'}, {'tag_name': 'update', 'query_id': 'update', 'query_type': 'update', 'sql_content': '<update id="update" parameterType="com.example.model.User"> UPDATE users SET name = #{name}, email = #{email}, update_date = #{updateDate} WHERE id = #{id} <if test="status != null"> AND status = #{status} </if> AND EXISTS (SELECT 1 FROM user_profiles WHERE user_id = users.id) </update>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 10, 'line_end': 25, 'hash_value': '4efea1e50787345162247ab4839127a6'}, {'tag_name': 'delete', 'query_id': 'delete', 'query_type': 'delete', 'sql_content': '<delete id="delete"> DELETE FROM users WHERE id = #{id} </delete>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 58, 'line_end': 63, 'hash_value': '45f11b532f6ca4aa56f6c0328112ae12'}, {'tag_name': 'select', 'query_id': 'searchUsers', 'query_type': 'select', 'sql_content': '<select id="searchUsers" resultType="com.example.model.User"> SELECT id, name, email, create_date, update_date FROM users <where> <if test="name != null and name != \'\'"> AND name LIKE CONCAT(\'%\', #{name}, \'%\') </if> <if test="email != null and email != \'\'"> AND email LIKE CONCAT(\'%\', #{email}, \'%\') </if> <if test="department != null"> AND dept_name = #{department} </if> </where> ORDER BY create_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 63, 'line_end': 83, 'hash_value': '37035224e7912b61b1c4149d04f6aa91'}, {'tag_name': 'select', 'query_id': 'countUsers', 'query_type': 'select', 'sql_content': '<select id="countUsers" resultType="int"> SELECT COUNT(*) FROM users </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 83, 'line_end': 88, 'hash_value': 'd311de3f782843302861b2e13041dd87'}, {'tag_name': 'select', 'query_id': 'getUserWithDetails', 'query_type': 'select', 'sql_content': '<select id="getUserWithDetails" resultType="com.example.model.User"> SELECT u.id, u.name, u.email, u.create_date, u.update_date FROM users u LEFT JOIN user_roles ur ON u.id = ur.user_id LEFT JOIN roles r ON ur.role_id = r.id LEFT JOIN user_preferences up ON u.id = up.user_id WHERE u.id = #{id} GROUP BY u.id, u.name, u.email, u.create_date, u.update_date </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 88, 'line_end': 103, 'hash_value': '36047a4313cae029bda9cf4d443925f5'}, {'tag_name': 'select', 'query_id': 'selectFromNonExistentTable', 'query_type': 'select', 'sql_content': '<select id="selectFromNonExistentTable" resultType="com.example.model.User"> SELECT id, name, email FROM NONEXISTENT_TABLE WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 103, 'line_end': 110, 'hash_value': '75a0a733a796119441c97eff2e3d4a7c'}, {'tag_name': 'select', 'query_id': 'selectWithNonExistentColumn', 'query_type': 'select', 'sql_content': '<select id="selectWithNonExistentColumn" resultType="com.example.model.User"> SELECT id, name, email, NONEXISTENT_COLUMN FROM users WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 110, 'line_end': 117, 'hash_value': '261b690c69c9095f9f265e380e4b3e64'}, {'tag_name': 'select', 'query_id': 'selectComplexError', 'query_type': 'select', 'sql_content': '<select id="selectComplexError" resultType="com.example.model.User"> SELECT u.id, u.name, u.email, nt.nonexistent_field FROM users u LEFT JOIN NONEXISTENT_TABLE nt ON u.id = nt.user_id WHERE u.NONEXISTENT_COLUMN = #{value} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\MixedErrorMapper.xml', 'line_start': 117, 'line_end': 124, 'hash_value': '53b7149857f95199914a4af8a52759dc'}]
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작 전
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 1/12
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectAll (select)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectAll (select) -> SQL_SELECT
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectAll', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 9, 'line_end': 16, 'hash_value': '82eaa39215d59ed1339da4c09a85b5ae', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectAll (SQL_SELECT)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectAll', 25)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectAll', None, 'SQL', 25, 9, 16, '82eaa39215d59ed1339da4c09a85b5ae', 'N', None, 'N')
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 235
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectAll (ID: 235)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 235
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectAll (component_id: 235)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,989 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectAll - 'sql_query'
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectAll
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 2/12
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectById (select)
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,989 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectById (select) -> SQL_SELECT
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectById', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 16, 'line_end': 23, 'hash_value': 'eb71f43588a3712f3ee5d759903a5d2a', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectById (SQL_SELECT)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectById', 25)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectById', None, 'SQL', 25, 16, 23, 'eb71f43588a3712f3ee5d759903a5d2a', 'N', None, 'N')
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 236
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectById (ID: 236)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 236
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectById (component_id: 236)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,990 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectById - 'sql_query'
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectById
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 3/12
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectByName (select)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectByName (select) -> SQL_SELECT
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectByName', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 23, 'line_end': 37, 'hash_value': 'f4cb308d088517f5e5b4034beedadd81', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectByName (SQL_SELECT)
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,990 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectByName', 25)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectByName', None, 'SQL', 25, 23, 37, 'f4cb308d088517f5e5b4034beedadd81', 'N', None, 'N')
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 237
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectByName (ID: 237)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 237
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectByName (component_id: 237)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,991 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectByName - 'sql_query'
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectByName
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 4/12
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: insert (insert)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: insert (insert) -> SQL_INSERT
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_INSERT', 'component_name': 'insert', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 37, 'line_end': 43, 'hash_value': 'e4acf60db7336a763d4ad40dbffe03c8', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: insert (SQL_INSERT)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'insert', 25)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_INSERT', 'insert', None, 'SQL', 25, 37, 43, 'e4acf60db7336a763d4ad40dbffe03c8', 'N', None, 'N')
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 238
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: insert (ID: 238)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 238
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: insert (component_id: 238)
2025-09-13 18:42:34,991 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,991 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): insert - 'sql_query'
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: insert
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 5/12
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: update (update)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: update (update) -> SQL_UPDATE
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_UPDATE', 'component_name': 'update', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 10, 'line_end': 25, 'hash_value': '4efea1e50787345162247ab4839127a6', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: update (SQL_UPDATE)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'update', 25)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_UPDATE', 'update', None, 'SQL', 25, 10, 25, '4efea1e50787345162247ab4839127a6', 'N', None, 'N')
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 239
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: update (ID: 239)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 239
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: update (component_id: 239)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,992 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): update - 'sql_query'
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: update
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 6/12
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: delete (delete)
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,992 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: delete (delete) -> SQL_DELETE
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_DELETE', 'component_name': 'delete', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 58, 'line_end': 63, 'hash_value': '45f11b532f6ca4aa56f6c0328112ae12', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: delete (SQL_DELETE)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'delete', 25)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_DELETE', 'delete', None, 'SQL', 25, 58, 63, '45f11b532f6ca4aa56f6c0328112ae12', 'N', None, 'N')
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 240
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: delete (ID: 240)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 240
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: delete (component_id: 240)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,993 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): delete - 'sql_query'
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: delete
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 7/12
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: searchUsers (select)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: searchUsers (select) -> SQL_SELECT
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'searchUsers', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 63, 'line_end': 83, 'hash_value': '37035224e7912b61b1c4149d04f6aa91', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: searchUsers (SQL_SELECT)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'searchUsers', 25)
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'searchUsers', None, 'SQL', 25, 63, 83, '37035224e7912b61b1c4149d04f6aa91', 'N', None, 'N')
2025-09-13 18:42:34,993 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 241
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: searchUsers (ID: 241)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 241
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: searchUsers (component_id: 241)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,994 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): searchUsers - 'sql_query'
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: searchUsers
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 8/12
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: countUsers (select)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: countUsers (select) -> SQL_SELECT
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'countUsers', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 83, 'line_end': 88, 'hash_value': 'd311de3f782843302861b2e13041dd87', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: countUsers (SQL_SELECT)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'countUsers', 25)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'countUsers', None, 'SQL', 25, 83, 88, 'd311de3f782843302861b2e13041dd87', 'N', None, 'N')
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 242
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: countUsers (ID: 242)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 242
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: countUsers (component_id: 242)
2025-09-13 18:42:34,994 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,994 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): countUsers - 'sql_query'
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: countUsers
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 9/12
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserWithDetails (select)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserWithDetails (select) -> SQL_SELECT
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserWithDetails', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 88, 'line_end': 103, 'hash_value': '36047a4313cae029bda9cf4d443925f5', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserWithDetails (SQL_SELECT)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserWithDetails', 25)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserWithDetails', None, 'SQL', 25, 88, 103, '36047a4313cae029bda9cf4d443925f5', 'N', None, 'N')
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 243
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserWithDetails (ID: 243)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 243
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserWithDetails (component_id: 243)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,995 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserWithDetails - 'sql_query'
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserWithDetails
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 10/12
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectFromNonExistentTable (select)
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,995 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectFromNonExistentTable (select) -> SQL_SELECT
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectFromNonExistentTable', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 103, 'line_end': 110, 'hash_value': '75a0a733a796119441c97eff2e3d4a7c', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectFromNonExistentTable (SQL_SELECT)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectFromNonExistentTable', 25)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectFromNonExistentTable', None, 'SQL', 25, 103, 110, '75a0a733a796119441c97eff2e3d4a7c', 'N', None, 'N')
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 244
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectFromNonExistentTable (ID: 244)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 244
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectFromNonExistentTable (component_id: 244)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,996 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectFromNonExistentTable - 'sql_query'
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectFromNonExistentTable
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 11/12
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectWithNonExistentColumn (select)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectWithNonExistentColumn (select) -> SQL_SELECT
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectWithNonExistentColumn', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 110, 'line_end': 117, 'hash_value': '261b690c69c9095f9f265e380e4b3e64', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectWithNonExistentColumn (SQL_SELECT)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectWithNonExistentColumn', 25)
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,996 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectWithNonExistentColumn', None, 'SQL', 25, 110, 117, '261b690c69c9095f9f265e380e4b3e64', 'N', None, 'N')
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 245
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectWithNonExistentColumn (ID: 245)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 245
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectWithNonExistentColumn (component_id: 245)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,997 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectWithNonExistentColumn - 'sql_query'
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectWithNonExistentColumn
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 12/12
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectComplexError (select)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\MixedErrorMapper.xml -> src/main/resources/mybatis/mapper/MixedErrorMapper.xml
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/MixedErrorMapper.xml -> 25
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 25
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectComplexError (select) -> SQL_SELECT
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectComplexError', 'parent_id': None, 'layer': 'SQL', 'file_id': 25, 'line_start': 117, 'line_end': 124, 'hash_value': '53b7149857f95199914a4af8a52759dc', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectComplexError (SQL_SELECT)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectComplexError', 25)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectComplexError', None, 'SQL', 25, 117, 124, '53b7149857f95199914a4af8a52759dc', 'N', None, 'N')
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 246
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectComplexError (ID: 246)
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 246
2025-09-13 18:42:34,997 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectComplexError (component_id: 246)
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:34,998 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectComplexError - 'sql_query'
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectComplexError
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 완료 ===
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - 처리된 쿼리 수: 12
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - 건너뜀 쿼리 수: 0
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 ID 매핑 크기: 12
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - SQL 컴포넌트 저장 완료: 12개 (건너뜀: 0개)
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 후: result=True
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 처리 결과: True
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 완료 ===
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: USER_PREFERENCES
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:34,998 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'USER_PREFERENCES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,998 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'USER_PREFERENCES', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 40
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_PREFERENCES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_PREFERENCES', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: USER_PREFERENCES (TABLE)
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'USER_PREFERENCES', 5)
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'USER_PREFERENCES', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 247
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 247
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=247, table_id=40
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:34,999 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 USER_PREFERENCES에 대한 조인 필드가 없습니다
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: USER_PREFERENCES, component_id: 247
2025-09-13 18:42:34,999 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: USER_PREFERENCES (ID: 247)
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: NONEXISTENT_TABLE
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'NONEXISTENT_TABLE', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'NONEXISTENT_TABLE', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 41
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'NONEXISTENT_TABLE', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'NONEXISTENT_TABLE', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: NONEXISTENT_TABLE (TABLE)
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'NONEXISTENT_TABLE', 5)
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'NONEXISTENT_TABLE', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 248
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 248
2025-09-13 18:42:35,000 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=248, table_id=41
2025-09-13 18:42:35,000 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:35,001 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:35,001 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 NONEXISTENT_TABLE에 대한 조인 필드가 없습니다
2025-09-13 18:42:35,001 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: NONEXISTENT_TABLE, component_id: 248
2025-09-13 18:42:35,001 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: NONEXISTENT_TABLE (ID: 248)
2025-09-13 18:42:35,001 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO relationships (..., 처리된 행: 4
2025-09-13 18:42:35,001 - SourceAnalyzer - INFO - logger.py:68 - JOIN 관계 저장 완료: 4개
2025-09-13 18:42:35,002 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,002 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,003 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,003 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,004 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,004 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,004 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,005 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,005 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml
2025-09-13 18:42:35,005 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 시작 ===
2025-09-13 18:42:35,005 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 9개
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - XML에서 추출된 SQL 쿼리 타입별 통계: {'select': 5, 'update': 2, 'insert': 1, 'delete': 1}
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor를 사용하여 처리 시작
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 전: sql_queries=9, project_id=1
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 시작 ===
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 9
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 시작
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 길이: 9
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리: {'tag_name': 'select', 'query_id': 'selectProductById', 'query_type': 'select', 'sql_content': '<select id="selectProductById" parameterType="string" resultType="com.example.model.Product"> SELECT * FROM products WHERE product_id = #{productId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': '9103f7f9ff0735739bb7a20be7078fc0'}
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 완료
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 시작
2025-09-13 18:42:35,006 - SourceAnalyzer - INFO - logger.py:68 - SQL 쿼리 타입별 통계: {'select': 5, 'update': 2, 'insert': 1, 'delete': 1}
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 완료
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 크기: 9
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리 정보: {'tag_name': 'select', 'query_id': 'selectProductById', 'query_type': 'select', 'sql_content': '<select id="selectProductById" parameterType="string" resultType="com.example.model.Product"> SELECT * FROM products WHERE product_id = #{productId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': '9103f7f9ff0735739bb7a20be7078fc0'}
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - 모든 쿼리 정보: [{'tag_name': 'select', 'query_id': 'selectProductById', 'query_type': 'select', 'sql_content': '<select id="selectProductById" parameterType="string" resultType="com.example.model.Product"> SELECT * FROM products WHERE product_id = #{productId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': '9103f7f9ff0735739bb7a20be7078fc0'}, {'tag_name': 'select', 'query_id': 'selectProductsByCondition', 'query_type': 'select', 'sql_content': '<select id="selectProductsByCondition" parameterType="map" resultType="com.example.model.Product"> SELECT * FROM products <where> <if test="name != null and name != \'\'"> AND product_name LIKE #{name} </if> <if test="category != null and category != \'\'"> AND category_id = #{category} </if> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="delYn != null and delYn != \'\'"> AND del_yn = #{delYn} </if> </where> ORDER BY created_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 13, 'line_end': 33, 'hash_value': 'af28b9cb0c4279670f398ac85e215ddb'}, {'tag_name': 'select', 'query_id': 'selectProductsByAdvancedCondition', 'query_type': 'select', 'sql_content': '<select id="selectProductsByAdvancedCondition" parameterType="map" resultType="com.example.model.Product"> SELECT p.*, c.category_name, b.brand_name FROM products p LEFT JOIN categories c ON p.category_id = c.category_id LEFT JOIN brands b ON p.brand_id = b.brand_id <where> <if test="categoryId != null and categoryId != \'\'"> AND p.category_id = #{categoryId} </if> <if test="brandId != null and brandId != \'\'"> AND p.brand_id = #{brandId} </if> <if test="minPrice != null"> AND p.price &gt;= #{minPrice} </if> <if test="maxPrice != null"> AND p.price &lt;= #{maxPrice} </if> <if test="minStock != null"> AND p.stock_quantity &gt;= #{minStock} </if> <if test="maxStock != null"> AND p.stock_quantity &lt;= #{maxStock} </if> <if test="statusList != null and statusList.size() &gt; 0"> AND p.status IN <foreach collection="statusList" item="status" open="(" separator="," close=")"> #{status} </foreach> </if> </where> ORDER BY p.created_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 33, 'line_end': 68, 'hash_value': '591faf2793bc2d562b21c875151df3ce'}, {'tag_name': 'select', 'query_id': 'selectProductsByCategory', 'query_type': 'select', 'sql_content': '<select id="selectProductsByCategory" parameterType="string" resultType="com.example.model.Product"> SELECT * FROM products WHERE category_id = #{categoryId} ORDER BY product_name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 68, 'line_end': 75, 'hash_value': 'be9116d1738a6ef356e907441dacbf88'}, {'tag_name': 'update', 'query_id': 'updateProductStock', 'query_type': 'update', 'sql_content': '<update id="updateProductStock"> UPDATE products SET stock_quantity = stock_quantity + #{quantity}, updated_date = SYSDATE WHERE product_id = #{productId} </update>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 75, 'line_end': 83, 'hash_value': 'b0f94569a759eccb311bc21c1b22591e'}, {'tag_name': 'update', 'query_id': 'updateProductDynamic', 'query_type': 'update', 'sql_content': '<update id="updateProductDynamic" parameterType="com.example.model.Product"> UPDATE products <set> <if test="productName != null and productName != \'\'"> product_name = #{productName}, </if> <if test="description != null and description != \'\'"> description = #{description}, </if> <if test="price != null"> price = #{price}, </if> <if test="stockQuantity != null"> stock_quantity = #{stockQuantity}, </if> <if test="status != null and status != \'\'"> status = #{status}, </if> <if test="categoryId != null and categoryId != \'\'"> category_id = #{categoryId}, </if> <if test="brandId != null and brandId != \'\'"> brand_id = #{brandId}, </if> <if test="supplierId != null and supplierId != \'\'"> supplier_id = #{supplierId}, </if> <if test="warehouseId != null and warehouseId != \'\'"> warehouse_id = #{warehouseId}, </if> updated_date = SYSDATE </set> WHERE product_id = #{productId} </update>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 83, 'line_end': 119, 'hash_value': 'e25ef1d88942b903b8882712e3c14cd5'}, {'tag_name': 'insert', 'query_id': 'insertProductDynamic', 'query_type': 'insert', 'sql_content': '<insert id="insertProductDynamic" parameterType="com.example.model.Product"> INSERT INTO products ( <trim suffixOverrides=","> <if test="productId != null and productId != \'\'">product_id,</if> <if test="productName != null and productName != \'\'">product_name,</if> <if test="description != null and description != \'\'">description,</if> <if test="price != null">price,</if> <if test="stockQuantity != null">stock_quantity,</if> <if test="status != null and status != \'\'">status,</if> <if test="categoryId != null and categoryId != \'\'">category_id,</if> <if test="brandId != null and brandId != \'\'">brand_id,</if> <if test="supplierId != null and supplierId != \'\'">supplier_id,</if> <if test="warehouseId != null and warehouseId != \'\'">warehouse_id,</if> created_date, updated_date, del_yn </trim> ) VALUES ( <trim suffixOverrides=","> <if test="productId != null and productId != \'\'">#{productId},</if> <if test="productName != null and productName != \'\'">#{productName},</if> <if test="description != null and description != \'\'">#{description},</if> <if test="price != null">#{price},</if> <if test="stockQuantity != null">#{stockQuantity},</if> <if test="status != null and status != \'\'">#{status},</if> <if test="categoryId != null and categoryId != \'\'">#{categoryId},</if> <if test="brandId != null and brandId != \'\'">#{brandId},</if> <if test="supplierId != null and supplierId != \'\'">#{supplierId},</if> <if test="warehouseId != null and warehouseId != \'\'">#{warehouseId},</if> SYSDATE, SYSDATE, \'N\' </trim> ) </insert>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 119, 'line_end': 156, 'hash_value': '257f04af9c97b500365f8b66b3107191'}, {'tag_name': 'delete', 'query_id': 'deleteProductsByCondition', 'query_type': 'delete', 'sql_content': '<delete id="deleteProductsByCondition" parameterType="map"> UPDATE products SET del_yn = \'Y\', updated_date = SYSDATE <where> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="categoryId != null and categoryId != \'\'"> AND category_id = #{categoryId} </if> <if test="beforeDate != null and beforeDate != \'\'"> AND created_date &lt; TO_DATE(#{beforeDate}, \'YYYY-MM-DD\') </if> </where> </delete>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 156, 'line_end': 173, 'hash_value': '1176af8ec820c19c5400db57c7b29962'}, {'tag_name': 'select', 'query_id': 'countProductsByCondition', 'query_type': 'select', 'sql_content': '<select id="countProductsByCondition" parameterType="map" resultType="int"> SELECT COUNT(*) FROM products <where> <if test="categoryId != null and categoryId != \'\'"> AND category_id = #{categoryId} </if> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="minPrice != null"> AND price &gt;= #{minPrice} </if> <if test="maxPrice != null"> AND price &lt;= #{maxPrice} </if> <if test="delYn != null and delYn != \'\'"> AND del_yn = #{delYn} </if> </where> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\ProductMapper.xml', 'line_start': 173, 'line_end': 195, 'hash_value': 'd923d871547f71353abeabc2e8559ab5'}]
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작 전
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 1/9
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectProductById (select)
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,006 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectProductById (select) -> SQL_SELECT
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectProductById', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 8, 'line_end': 13, 'hash_value': '9103f7f9ff0735739bb7a20be7078fc0', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectProductById (SQL_SELECT)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectProductById', 26)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectProductById', None, 'SQL', 26, 8, 13, '9103f7f9ff0735739bb7a20be7078fc0', 'N', None, 'N')
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 249
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectProductById (ID: 249)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 249
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectProductById (component_id: 249)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,007 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectProductById - 'sql_query'
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectProductById
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 2/9
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectProductsByCondition (select)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectProductsByCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectProductsByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 13, 'line_end': 33, 'hash_value': 'af28b9cb0c4279670f398ac85e215ddb', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectProductsByCondition (SQL_SELECT)
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,007 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectProductsByCondition', 26)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectProductsByCondition', None, 'SQL', 26, 13, 33, 'af28b9cb0c4279670f398ac85e215ddb', 'N', None, 'N')
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 250
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectProductsByCondition (ID: 250)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 250
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectProductsByCondition (component_id: 250)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,008 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectProductsByCondition - 'sql_query'
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectProductsByCondition
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 3/9
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectProductsByAdvancedCondition (select)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectProductsByAdvancedCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectProductsByAdvancedCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 33, 'line_end': 68, 'hash_value': '591faf2793bc2d562b21c875151df3ce', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectProductsByAdvancedCondition (SQL_SELECT)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectProductsByAdvancedCondition', 26)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectProductsByAdvancedCondition', None, 'SQL', 26, 33, 68, '591faf2793bc2d562b21c875151df3ce', 'N', None, 'N')
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 251
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectProductsByAdvancedCondition (ID: 251)
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 251
2025-09-13 18:42:35,008 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectProductsByAdvancedCondition (component_id: 251)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,009 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectProductsByAdvancedCondition - 'sql_query'
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectProductsByAdvancedCondition
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 4/9
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectProductsByCategory (select)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectProductsByCategory (select) -> SQL_SELECT
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectProductsByCategory', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 68, 'line_end': 75, 'hash_value': 'be9116d1738a6ef356e907441dacbf88', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectProductsByCategory (SQL_SELECT)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectProductsByCategory', 26)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectProductsByCategory', None, 'SQL', 26, 68, 75, 'be9116d1738a6ef356e907441dacbf88', 'N', None, 'N')
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 252
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectProductsByCategory (ID: 252)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 252
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectProductsByCategory (component_id: 252)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,009 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectProductsByCategory - 'sql_query'
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectProductsByCategory
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 5/9
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: updateProductStock (update)
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,009 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: updateProductStock (update) -> SQL_UPDATE
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_UPDATE', 'component_name': 'updateProductStock', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 75, 'line_end': 83, 'hash_value': 'b0f94569a759eccb311bc21c1b22591e', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: updateProductStock (SQL_UPDATE)
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'updateProductStock', 26)
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_UPDATE', 'updateProductStock', None, 'SQL', 26, 75, 83, 'b0f94569a759eccb311bc21c1b22591e', 'N', None, 'N')
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 253
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: updateProductStock (ID: 253)
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 253
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: updateProductStock (component_id: 253)
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,010 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): updateProductStock - 'sql_query'
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: updateProductStock
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 6/9
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: updateProductDynamic (update)
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: updateProductDynamic (update) -> SQL_UPDATE
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_UPDATE', 'component_name': 'updateProductDynamic', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 83, 'line_end': 119, 'hash_value': 'e25ef1d88942b903b8882712e3c14cd5', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,010 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: updateProductDynamic (SQL_UPDATE)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'updateProductDynamic', 26)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_UPDATE', 'updateProductDynamic', None, 'SQL', 26, 83, 119, 'e25ef1d88942b903b8882712e3c14cd5', 'N', None, 'N')
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 254
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: updateProductDynamic (ID: 254)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 254
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: updateProductDynamic (component_id: 254)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,011 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): updateProductDynamic - 'sql_query'
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: updateProductDynamic
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 7/9
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: insertProductDynamic (insert)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: insertProductDynamic (insert) -> SQL_INSERT
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_INSERT', 'component_name': 'insertProductDynamic', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 119, 'line_end': 156, 'hash_value': '257f04af9c97b500365f8b66b3107191', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: insertProductDynamic (SQL_INSERT)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'insertProductDynamic', 26)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_INSERT', 'insertProductDynamic', None, 'SQL', 26, 119, 156, '257f04af9c97b500365f8b66b3107191', 'N', None, 'N')
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 255
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: insertProductDynamic (ID: 255)
2025-09-13 18:42:35,011 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 255
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: insertProductDynamic (component_id: 255)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,012 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): insertProductDynamic - 'sql_query'
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: insertProductDynamic
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 8/9
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: deleteProductsByCondition (delete)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: deleteProductsByCondition (delete) -> SQL_DELETE
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_DELETE', 'component_name': 'deleteProductsByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 156, 'line_end': 173, 'hash_value': '1176af8ec820c19c5400db57c7b29962', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: deleteProductsByCondition (SQL_DELETE)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'deleteProductsByCondition', 26)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_DELETE', 'deleteProductsByCondition', None, 'SQL', 26, 156, 173, '1176af8ec820c19c5400db57c7b29962', 'N', None, 'N')
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 256
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: deleteProductsByCondition (ID: 256)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 256
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: deleteProductsByCondition (component_id: 256)
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,012 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): deleteProductsByCondition - 'sql_query'
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: deleteProductsByCondition
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 9/9
2025-09-13 18:42:35,012 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: countProductsByCondition (select)
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\ProductMapper.xml -> src/main/resources/mybatis/mapper/ProductMapper.xml
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/ProductMapper.xml -> 26
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 26
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: countProductsByCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'countProductsByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 26, 'line_start': 173, 'line_end': 195, 'hash_value': 'd923d871547f71353abeabc2e8559ab5', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: countProductsByCondition (SQL_SELECT)
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'countProductsByCondition', 26)
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'countProductsByCondition', None, 'SQL', 26, 173, 195, 'd923d871547f71353abeabc2e8559ab5', 'N', None, 'N')
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 257
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: countProductsByCondition (ID: 257)
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 257
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: countProductsByCondition (component_id: 257)
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,013 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): countProductsByCondition - 'sql_query'
2025-09-13 18:42:35,013 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: countProductsByCondition
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 완료 ===
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - 처리된 쿼리 수: 9
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - 건너뜀 쿼리 수: 0
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 ID 매핑 크기: 9
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - SQL 컴포넌트 저장 완료: 9개 (건너뜀: 0개)
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 후: result=True
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 처리 결과: True
2025-09-13 18:42:35,013 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 완료 ===
2025-09-13 18:42:35,014 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,014 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,014 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,014 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,014 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO relationships (..., 처리된 행: 2
2025-09-13 18:42:35,014 - SourceAnalyzer - INFO - logger.py:68 - JOIN 관계 저장 완료: 2개
2025-09-13 18:42:35,015 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,015 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,015 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,016 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,016 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,017 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,017 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,018 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,018 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,019 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,019 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,020 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,021 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,021 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,022 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,022 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,022 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,023 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,023 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,024 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,024 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,024 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 읽기 성공: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 시작 ===
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 22개
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - XML에서 추출된 SQL 쿼리 타입별 통계: {'select': 15, 'update': 2, 'insert': 2, 'delete': 1, 'merge': 2}
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor를 사용하여 처리 시작
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 전: sql_queries=22, project_id=1
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 시작 ===
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - 전달받은 SQL 쿼리 수: 22
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - 프로젝트 ID: 1
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 시작
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 길이: 22
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리: {'tag_name': 'select', 'query_id': 'selectUserById', 'query_type': 'select', 'sql_content': '<select id="selectUserById" parameterType="long" resultType="com.example.model.User"> SELECT * FROM users WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': 'a362b8fa9d2fed452077690aa251f9e0'}
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 검증 완료
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 시작
2025-09-13 18:42:35,025 - SourceAnalyzer - INFO - logger.py:68 - SQL 쿼리 타입별 통계: {'select': 15, 'update': 2, 'insert': 2, 'delete': 1, 'merge': 2}
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 타입별 통계 완료
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 크기: 22
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 리스트 타입: <class 'list'>
2025-09-13 18:42:35,025 - SourceAnalyzer - DEBUG - logger.py:64 - 첫 번째 쿼리 정보: {'tag_name': 'select', 'query_id': 'selectUserById', 'query_type': 'select', 'sql_content': '<select id="selectUserById" parameterType="long" resultType="com.example.model.User"> SELECT * FROM users WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': 'a362b8fa9d2fed452077690aa251f9e0'}
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 모든 쿼리 정보: [{'tag_name': 'select', 'query_id': 'selectUserById', 'query_type': 'select', 'sql_content': '<select id="selectUserById" parameterType="long" resultType="com.example.model.User"> SELECT * FROM users WHERE id = #{id} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 8, 'line_end': 13, 'hash_value': 'a362b8fa9d2fed452077690aa251f9e0'}, {'tag_name': 'select', 'query_id': 'selectUsersByCondition', 'query_type': 'select', 'sql_content': '<select id="selectUsersByCondition" parameterType="map" resultType="com.example.model.User"> SELECT * FROM users <where> <if test="name != null and name != \'\'"> AND name LIKE #{name} </if> <if test="email != null and email != \'\'"> AND email LIKE #{email} </if> <if test="status != null and status != \'\'"> AND status = #{status} </if> </where> ORDER BY created_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 13, 'line_end': 30, 'hash_value': '7d97c43d3792e20d1e835e5e281ac00e'}, {'tag_name': 'select', 'query_id': 'selectUsersByAdvancedCondition', 'query_type': 'select', 'sql_content': '<select id="selectUsersByAdvancedCondition" parameterType="map" resultType="com.example.model.User"> SELECT u.*, ut.type_name FROM users u LEFT JOIN user_types ut ON u.user_type = ut.type_code <where> <if test="userType != null and userType != \'\'"> AND u.user_type = #{userType} </if> <if test="minAge != null"> AND u.age &gt;= #{minAge} </if> <if test="maxAge != null"> AND u.age &lt;= #{maxAge} </if> <if test="startDate != null and startDate != \'\'"> AND u.created_date &gt;= TO_DATE(#{startDate}, \'YYYY-MM-DD\') </if> <if test="endDate != null and endDate != \'\'"> AND u.created_date &lt;= TO_DATE(#{endDate}, \'YYYY-MM-DD\') </if> <if test="statusList != null and statusList.size() &gt; 0"> AND u.status IN <foreach collection="statusList" item="status" open="(" separator="," close=")"> #{status} </foreach> </if> </where> ORDER BY u.created_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 30, 'line_end': 61, 'hash_value': '0ee9b0d9a92accafdf5ce28922c23eb7'}, {'tag_name': 'select', 'query_id': 'selectUsersByType', 'query_type': 'select', 'sql_content': '<select id="selectUsersByType" parameterType="string" resultType="com.example.model.User"> SELECT * FROM users WHERE user_type = #{type} ORDER BY name </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 61, 'line_end': 68, 'hash_value': '2e05c286fc588987f89d9bfefe1d20d8'}, {'tag_name': 'update', 'query_id': 'updateUserDynamic', 'query_type': 'update', 'sql_content': '<update id="updateUserDynamic" parameterType="com.example.model.User"> UPDATE users <set> <if test="username != null and username != \'\'"> username = #{username}, </if> <if test="email != null and email != \'\'"> email = #{email}, </if> <if test="name != null and name != \'\'"> name = #{name}, </if> <if test="age != null"> age = #{age}, </if> <if test="status != null and status != \'\'"> status = #{status}, </if> <if test="phone != null and phone != \'\'"> phone = #{phone}, </if> <if test="address != null and address != \'\'"> address = #{address}, </if> updated_date = SYSDATE </set> WHERE id = #{id} </update>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 68, 'line_end': 98, 'hash_value': '78249263a384bf8d9bb40ca1d6711d39'}, {'tag_name': 'insert', 'query_id': 'insertUserDynamic', 'query_type': 'insert', 'sql_content': '<insert id="insertUserDynamic" parameterType="com.example.model.User" useGeneratedKeys="true" keyProperty="id"> INSERT INTO users ( <trim suffixOverrides=","> <if test="username != null and username != \'\'">username,</if> <if test="email != null and email != \'\'">email,</if> <if test="password != null and password != \'\'">password,</if> <if test="name != null and name != \'\'">name,</if> <if test="age != null">age,</if> <if test="status != null and status != \'\'">status,</if> <if test="userType != null and userType != \'\'">user_type,</if> <if test="phone != null and phone != \'\'">phone,</if> <if test="address != null and address != \'\'">address,</if> created_date, updated_date </trim> ) VALUES ( <trim suffixOverrides=","> <if test="username != null and username != \'\'">#{username},</if> <if test="email != null and email != \'\'">#{email},</if> <if test="password != null and password != \'\'">#{password},</if> <if test="name != null and name != \'\'">#{name},</if> <if test="age != null">#{age},</if> <if test="status != null and status != \'\'">#{status},</if> <if test="userType != null and userType != \'\'">#{userType},</if> <if test="phone != null and phone != \'\'">#{phone},</if> <if test="address != null and address != \'\'">#{address},</if> SYSDATE, SYSDATE </trim> ) </insert>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 98, 'line_end': 131, 'hash_value': 'aa92b382a127618c7fe6b0334ea7784b'}, {'tag_name': 'delete', 'query_id': 'deleteUsersByCondition', 'query_type': 'delete', 'sql_content': '<delete id="deleteUsersByCondition" parameterType="map"> DELETE FROM users <where> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="userType != null and userType != \'\'"> AND user_type = #{userType} </if> <if test="beforeDate != null and beforeDate != \'\'"> AND created_date &lt; TO_DATE(#{beforeDate}, \'YYYY-MM-DD\') </if> </where> </delete>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 131, 'line_end': 147, 'hash_value': '7607befae4ce3ab3afad3f6869e8f7c3'}, {'tag_name': 'select', 'query_id': 'countUsersByCondition', 'query_type': 'select', 'sql_content': '<select id="countUsersByCondition" parameterType="map" resultType="int"> SELECT COUNT(*) FROM users <where> <if test="userType != null and userType != \'\'"> AND user_type = #{userType} </if> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="minAge != null"> AND age &gt;= #{minAge} </if> <if test="maxAge != null"> AND age &lt;= #{maxAge} </if> </where> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 147, 'line_end': 167, 'hash_value': '811225a488a5b0133b2386fbf44eafe7'}, {'tag_name': 'select', 'query_id': 'getUserStatistics', 'query_type': 'select', 'sql_content': '<select id="getUserStatistics" parameterType="map" resultType="map"> SELECT COUNT(*) as total_users, COUNT(CASE WHEN status = \'ACTIVE\' THEN 1 END) as active_users, COUNT(CASE WHEN status = \'INACTIVE\' THEN 1 END) as inactive_users, COUNT(CASE WHEN user_type = \'ADMIN\' THEN 1 END) as admin_users, COUNT(CASE WHEN user_type = \'PREMIUM\' THEN 1 END) as premium_users, AVG(age) as average_age, MIN(age) as min_age, MAX(age) as max_age, COUNT(CASE WHEN created_date &gt;= TRUNC(SYSDATE - 30) THEN 1 END) as new_users_last_30_days, COUNT(CASE WHEN updated_date &gt;= TRUNC(SYSDATE - 7) THEN 1 END) as updated_users_last_7_days FROM users <where> <if test="userType != null and userType != \'\'"> AND user_type = #{userType} </if> <if test="status != null and status != \'\'"> AND status = #{status} </if> <if test="startDate != null and startDate != \'\'"> AND created_date &gt;= TO_DATE(#{startDate}, \'YYYY-MM-DD\') </if> <if test="endDate != null and endDate != \'\'"> AND created_date &lt;= TO_DATE(#{endDate}, \'YYYY-MM-DD\') </if> </where> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 167, 'line_end': 197, 'hash_value': 'e2d1108492db63cb9889630ebeacf87f'}, {'tag_name': 'select', 'query_id': 'getUserAgeDistribution', 'query_type': 'select', 'sql_content': '<select id="getUserAgeDistribution" parameterType="map" resultType="map"> SELECT CASE WHEN age &lt; 20 THEN \'10대\' WHEN age &lt; 30 THEN \'20대\' WHEN age &lt; 40 THEN \'30대\' WHEN age &lt; 50 THEN \'40대\' WHEN age &lt; 60 THEN \'50대\' ELSE \'60대 이상\' END as age_group, COUNT(*) as user_count, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM users), 2) as percentage FROM users <where> age IS NOT NULL <if test="status != null and status != \'\'"> AND status = #{status} </if> </where> GROUP BY CASE WHEN age &lt; 20 THEN \'10대\' WHEN age &lt; 30 THEN \'20대\' WHEN age &lt; 40 THEN \'30대\' WHEN age &lt; 50 THEN \'40대\' WHEN age &lt; 60 THEN \'50대\' ELSE \'60대 이상\' END ORDER BY CASE WHEN age &lt; 20 THEN 1 WHEN age &lt; 30 THEN 2 WHEN age &lt; 40 THEN 3 WHEN age &lt; 50 THEN 4 WHEN age &lt; 60 THEN 5 ELSE 6 END </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 197, 'line_end': 237, 'hash_value': '48798a2aa3b92303512b3e5464ecaa3f'}, {'tag_name': 'select', 'query_id': 'getUserActivityAnalysis', 'query_type': 'select', 'sql_content': '<select id="getUserActivityAnalysis" parameterType="map" resultType="map"> SELECT u.user_id, u.username, u.name, u.status, u.user_type, u.created_date, u.updated_date, DATEDIFF(day, u.created_date, SYSDATE) as account_age_days, DATEDIFF(day, u.updated_date, SYSDATE) as days_since_last_update, CASE WHEN u.updated_date IS NULL THEN \'Never Updated\' WHEN DATEDIFF(day, u.updated_date, SYSDATE) &lt;= 7 THEN \'Active\' WHEN DATEDIFF(day, u.updated_date, SYSDATE) &lt;= 30 THEN \'Moderate\' ELSE \'Inactive\' END as activity_level FROM users u <where> <if test="userType != null and userType != \'\'"> AND u.user_type = #{userType} </if> <if test="status != null and status != \'\'"> AND u.status = #{status} </if> <if test="activityLevel != null and activityLevel != \'\'"> AND CASE WHEN u.updated_date IS NULL THEN \'Never Updated\' WHEN DATEDIFF(day, u.updated_date, SYSDATE) &lt;= 7 THEN \'Active\' WHEN DATEDIFF(day, u.updated_date, SYSDATE) &lt;= 30 THEN \'Moderate\' ELSE \'Inactive\' END = #{activityLevel} </if> </where> ORDER BY u.updated_date DESC NULLS LAST </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 237, 'line_end': 275, 'hash_value': '77cae977aa1d44c9e8a7601e14094a1e'}, {'tag_name': 'select', 'query_id': 'searchUsersAdvanced', 'query_type': 'select', 'sql_content': '<select id="searchUsersAdvanced" parameterType="map" resultType="com.example.model.User"> SELECT u.id, u.username, u.email, u.password, u.name, u.age, u.status, u.user_type, u.phone, u.address, u.created_date, u.updated_date, ut.type_name, ut.description as type_description FROM users u LEFT JOIN user_types ut ON u.user_type = ut.type_code <where> <if test="searchText != null and searchText != \'\'"> AND ( UPPER(u.username) LIKE UPPER(\'%\' || #{searchText} || \'%\') OR UPPER(u.name) LIKE UPPER(\'%\' || #{searchText} || \'%\') OR UPPER(u.email) LIKE UPPER(\'%\' || #{searchText} || \'%\') ) </if> <if test="userTypes != null and userTypes.size() &gt; 0"> AND u.user_type IN <foreach collection="userTypes" item="type" open="(" separator="," close=")"> #{type} </foreach> </if> <if test="statusList != null and statusList.size() &gt; 0"> AND u.status IN <foreach collection="statusList" item="status" open="(" separator="," close=")"> #{status} </foreach> </if> <if test="ageRange != null"> AND u.age BETWEEN #{ageRange.minAge} AND #{ageRange.maxAge} </if> <if test="dateRange != null"> AND u.created_date BETWEEN TO_DATE(#{dateRange.startDate}, \'YYYY-MM-DD\') AND TO_DATE(#{dateRange.endDate}, \'YYYY-MM-DD\') </if> <if test="hasPhone != null"> <choose> <when test="hasPhone == true"> AND u.phone IS NOT NULL AND u.phone != \'\' </when> <otherwise> AND (u.phone IS NULL OR u.phone = \'\') </otherwise> </choose> </if> <if test="hasAddress != null"> <choose> <when test="hasAddress == true"> AND u.address IS NOT NULL AND u.address != \'\' </when> <otherwise> AND (u.address IS NULL OR u.address = \'\') </otherwise> </choose> </if> </where> <choose> <when test="sortBy != null and sortBy != \'\'"> <choose> <when test="sortBy == \'name\'"> ORDER BY u.name <if test="sortOrder != null and sortOrder == \'desc\'">DESC</if> </when> <when test="sortBy == \'age\'"> ORDER BY u.age <if test="sortOrder != null and sortOrder == \'desc\'">DESC</if> </when> <when test="sortBy == \'created_date\'"> ORDER BY u.created_date <if test="sortOrder != null and sortOrder == \'desc\'">DESC</if> </when> <when test="sortBy == \'updated_date\'"> ORDER BY u.updated_date <if test="sortOrder != null and sortOrder == \'desc\'">DESC</if> </when> <otherwise> ORDER BY u.created_date DESC </otherwise> </choose> </when> <otherwise> ORDER BY u.created_date DESC </otherwise> </choose> <if test="offset != null and limit != null"> LIMIT #{limit} OFFSET #{offset} </if> </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 275, 'line_end': 376, 'hash_value': '68dc1372759e82eef03607a8040fedfe'}, {'tag_name': 'select', 'query_id': 'getUserGroupStatistics', 'query_type': 'select', 'sql_content': '<select id="getUserGroupStatistics" parameterType="map" resultType="map"> SELECT user_type, status, COUNT(*) as user_count, AVG(age) as avg_age, MIN(created_date) as first_created, MAX(created_date) as last_created, COUNT(CASE WHEN updated_date IS NOT NULL THEN 1 END) as updated_count FROM users <where> <if test="startDate != null and startDate != \'\'"> AND created_date &gt;= TO_DATE(#{startDate}, \'YYYY-MM-DD\') </if> <if test="endDate != null and endDate != \'\'"> AND created_date &lt;= TO_DATE(#{endDate}, \'YYYY-MM-DD\') </if> </where> GROUP BY user_type, status ORDER BY user_type, status </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 376, 'line_end': 399, 'hash_value': 'ce17031785293bf8a8c68041e4cecf40'}, {'tag_name': 'select', 'query_id': 'getUserWithPreferences', 'query_type': 'select', 'sql_content': '<select id="getUserWithPreferences" parameterType="long" resultType="map"> SELECT u.id, u.username, u.name, u.email, u.user_type, up.theme, up.language, up.timezone, up.notification_email, up.notification_sms, up.created_date as user_created, up.updated_date as pref_updated FROM users u LEFT JOIN user_preferences up ON u.id = up.user_id WHERE u.id = #{userId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 399, 'line_end': 419, 'hash_value': '6e212312a82ae6557da385dfa7af9cca'}, {'tag_name': 'select', 'query_id': 'getUserWithPreferencesAndType', 'query_type': 'select', 'sql_content': '<select id="getUserWithPreferencesAndType" parameterType="long" resultType="map"> SELECT u.id, u.username, u.name, u.email, u.user_type, ut.type_name, ut.description as type_description, up.theme, up.language, up.timezone, up.notification_email, up.notification_sms FROM users u LEFT JOIN user_types ut ON u.user_type = ut.type_code LEFT JOIN user_preferences up ON u.id = up.user_id WHERE u.id = #{userId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 419, 'line_end': 440, 'hash_value': '0c2705675ca57eaf3d612c8b53e6b3f2'}, {'tag_name': 'select', 'query_id': 'getUserActivityLog', 'query_type': 'select', 'sql_content': '<select id="getUserActivityLog" parameterType="long" resultType="map"> SELECT usr.id, usr.username, usr.name, act.activity_type, act.activity_date, act.description FROM users usr LEFT JOIN user_activity_log act ON usr.id = act.user_id WHERE usr.id = #{userId} ORDER BY act.activity_date DESC </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 440, 'line_end': 455, 'hash_value': 'f7273adad5907e3d8a2abaa93a1341ec'}, {'tag_name': 'select', 'query_id': 'getUserSettings', 'query_type': 'select', 'sql_content': '<select id="getUserSettings" parameterType="long" resultType="map"> SELECT u.id, u.username, settings.setting_key, settings.setting_value, settings.updated_date FROM users u LEFT JOIN user_settings settings ON u.id = settings.user_id WHERE u.id = #{userId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 455, 'line_end': 468, 'hash_value': '7ecf0fef56ccf6b1083217245b022413'}, {'tag_name': 'update', 'query_id': 'updateUserPreferences', 'query_type': 'update', 'sql_content': '<update id="updateUserPreferences" parameterType="map"> UPDATE user_preferences SET theme = #{theme}, language = #{language}, timezone = #{timezone}, notification_email = #{notificationEmail}, notification_sms = #{notificationSms}, updated_date = SYSDATE WHERE user_id = #{userId} </update>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 468, 'line_end': 481, 'hash_value': 'dca68664b8114aabe1841abd2a62f216'}, {'tag_name': 'insert', 'query_id': 'insertUserPreferences', 'query_type': 'insert', 'sql_content': '<insert id="insertUserPreferences" parameterType="map"> INSERT INTO user_preferences ( user_id, theme, language, timezone, notification_email, notification_sms, created_date, updated_date ) VALUES ( #{userId}, #{theme}, #{language}, #{timezone}, #{notificationEmail}, #{notificationSms}, SYSDATE, SYSDATE ) </insert>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 481, 'line_end': 504, 'hash_value': '07bdfcb2b387057750d3ce5cc2647bbd'}, {'tag_name': 'select', 'query_id': 'getUserWithNewTable', 'query_type': 'select', 'sql_content': '<select id="getUserWithNewTable" parameterType="long" resultType="map"> SELECT u.id, u.username, u.name, nt.new_field1, nt.new_field2 FROM users u LEFT JOIN new_test_table nt ON u.id = nt.user_id WHERE u.id = #{userId} </select>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 504, 'line_end': 517, 'hash_value': '4d1afbb77338d8fb7e15f76eba13ce41'}, {'tag_name': 'merge', 'query_id': 'mergeUserStatistics', 'query_type': 'merge', 'sql_content': '<merge id="mergeUserStatistics" parameterType="map"> MERGE INTO user_statistics us USING ( SELECT #{userId} as user_id, #{statType} as stat_type, #{statValue} as stat_value, SYSDATE as stat_date FROM dual ) src ON (us.user_id = src.user_id AND us.stat_type = src.stat_type) WHEN MATCHED THEN UPDATE SET stat_value = src.stat_value, stat_date = src.stat_date, updated_date = SYSDATE WHEN NOT MATCHED THEN INSERT (user_id, stat_type, stat_value, stat_date, created_date, updated_date) VALUES (src.user_id, src.stat_type, src.stat_value, src.stat_date, SYSDATE, SYSDATE) </merge>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 517, 'line_end': 538, 'hash_value': 'd8d09add81ee64f6a2004e68031c1349'}, {'tag_name': 'merge', 'query_id': 'mergeUserActivityLog', 'query_type': 'merge', 'sql_content': '<merge id="mergeUserActivityLog" parameterType="map"> MERGE INTO user_activity_log ual USING ( SELECT #{userId} as user_id, #{activityType} as activity_type, #{description} as description, SYSDATE as activity_date FROM dual ) src ON (ual.user_id = src.user_id AND ual.activity_type = src.activity_type AND ual.activity_date = TRUNC(src.activity_date)) WHEN MATCHED THEN UPDATE SET description = src.description, updated_date = SYSDATE WHEN NOT MATCHED THEN INSERT (user_id, activity_type, description, activity_date, created_date, updated_date) VALUES (src.user_id, src.activity_type, src.description, src.activity_date, SYSDATE, SYSDATE) </merge>', 'file_path': 'D:\\Analyzer\\CreateMetaDb\\projects\\sampleSrc\\src\\main\\resources\\mybatis\\mapper\\UserMapper.xml', 'line_start': 538, 'line_end': 557, 'hash_value': '0bf2431d425926b97609e8584071eb3b'}]
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작 전
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 1/22
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectUserById (select)
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectUserById (select) -> SQL_SELECT
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectUserById', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 8, 'line_end': 13, 'hash_value': 'a362b8fa9d2fed452077690aa251f9e0', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectUserById (SQL_SELECT)
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectUserById', 27)
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectUserById', None, 'SQL', 27, 8, 13, 'a362b8fa9d2fed452077690aa251f9e0', 'N', None, 'N')
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 258
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectUserById (ID: 258)
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 258
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectUserById (component_id: 258)
2025-09-13 18:42:35,026 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,026 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectUserById - 'sql_query'
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectUserById
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 2/22
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectUsersByCondition (select)
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectUsersByCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectUsersByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 13, 'line_end': 30, 'hash_value': '7d97c43d3792e20d1e835e5e281ac00e', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectUsersByCondition (SQL_SELECT)
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectUsersByCondition', 27)
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectUsersByCondition', None, 'SQL', 27, 13, 30, '7d97c43d3792e20d1e835e5e281ac00e', 'N', None, 'N')
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 259
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectUsersByCondition (ID: 259)
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 259
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectUsersByCondition (component_id: 259)
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,027 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectUsersByCondition - 'sql_query'
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectUsersByCondition
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 3/22
2025-09-13 18:42:35,027 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectUsersByAdvancedCondition (select)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectUsersByAdvancedCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectUsersByAdvancedCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 30, 'line_end': 61, 'hash_value': '0ee9b0d9a92accafdf5ce28922c23eb7', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectUsersByAdvancedCondition (SQL_SELECT)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectUsersByAdvancedCondition', 27)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectUsersByAdvancedCondition', None, 'SQL', 27, 30, 61, '0ee9b0d9a92accafdf5ce28922c23eb7', 'N', None, 'N')
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 260
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectUsersByAdvancedCondition (ID: 260)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 260
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectUsersByAdvancedCondition (component_id: 260)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,028 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectUsersByAdvancedCondition - 'sql_query'
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectUsersByAdvancedCondition
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 4/22
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: selectUsersByType (select)
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: selectUsersByType (select) -> SQL_SELECT
2025-09-13 18:42:35,028 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'selectUsersByType', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 61, 'line_end': 68, 'hash_value': '2e05c286fc588987f89d9bfefe1d20d8', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: selectUsersByType (SQL_SELECT)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'selectUsersByType', 27)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'selectUsersByType', None, 'SQL', 27, 61, 68, '2e05c286fc588987f89d9bfefe1d20d8', 'N', None, 'N')
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 261
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: selectUsersByType (ID: 261)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 261
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: selectUsersByType (component_id: 261)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,029 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): selectUsersByType - 'sql_query'
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: selectUsersByType
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 5/22
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: updateUserDynamic (update)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: updateUserDynamic (update) -> SQL_UPDATE
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_UPDATE', 'component_name': 'updateUserDynamic', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 68, 'line_end': 98, 'hash_value': '78249263a384bf8d9bb40ca1d6711d39', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: updateUserDynamic (SQL_UPDATE)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'updateUserDynamic', 27)
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,029 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_UPDATE', 'updateUserDynamic', None, 'SQL', 27, 68, 98, '78249263a384bf8d9bb40ca1d6711d39', 'N', None, 'N')
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 262
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: updateUserDynamic (ID: 262)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 262
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: updateUserDynamic (component_id: 262)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,030 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): updateUserDynamic - 'sql_query'
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: updateUserDynamic
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 6/22
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: insertUserDynamic (insert)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: insertUserDynamic (insert) -> SQL_INSERT
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_INSERT', 'component_name': 'insertUserDynamic', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 98, 'line_end': 131, 'hash_value': 'aa92b382a127618c7fe6b0334ea7784b', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: insertUserDynamic (SQL_INSERT)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'insertUserDynamic', 27)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_INSERT', 'insertUserDynamic', None, 'SQL', 27, 98, 131, 'aa92b382a127618c7fe6b0334ea7784b', 'N', None, 'N')
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 263
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: insertUserDynamic (ID: 263)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 263
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: insertUserDynamic (component_id: 263)
2025-09-13 18:42:35,030 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,030 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): insertUserDynamic - 'sql_query'
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: insertUserDynamic
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 7/22
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: deleteUsersByCondition (delete)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: deleteUsersByCondition (delete) -> SQL_DELETE
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_DELETE', 'component_name': 'deleteUsersByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 131, 'line_end': 147, 'hash_value': '7607befae4ce3ab3afad3f6869e8f7c3', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: deleteUsersByCondition (SQL_DELETE)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'deleteUsersByCondition', 27)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_DELETE', 'deleteUsersByCondition', None, 'SQL', 27, 131, 147, '7607befae4ce3ab3afad3f6869e8f7c3', 'N', None, 'N')
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 264
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: deleteUsersByCondition (ID: 264)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 264
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: deleteUsersByCondition (component_id: 264)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,031 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): deleteUsersByCondition - 'sql_query'
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: deleteUsersByCondition
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 8/22
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: countUsersByCondition (select)
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,031 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: countUsersByCondition (select) -> SQL_SELECT
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'countUsersByCondition', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 147, 'line_end': 167, 'hash_value': '811225a488a5b0133b2386fbf44eafe7', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: countUsersByCondition (SQL_SELECT)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'countUsersByCondition', 27)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'countUsersByCondition', None, 'SQL', 27, 147, 167, '811225a488a5b0133b2386fbf44eafe7', 'N', None, 'N')
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 265
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: countUsersByCondition (ID: 265)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 265
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: countUsersByCondition (component_id: 265)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,032 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): countUsersByCondition - 'sql_query'
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: countUsersByCondition
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 9/22
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserStatistics (select)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserStatistics (select) -> SQL_SELECT
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserStatistics', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 167, 'line_end': 197, 'hash_value': 'e2d1108492db63cb9889630ebeacf87f', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserStatistics (SQL_SELECT)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserStatistics', 27)
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserStatistics', None, 'SQL', 27, 167, 197, 'e2d1108492db63cb9889630ebeacf87f', 'N', None, 'N')
2025-09-13 18:42:35,032 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 266
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserStatistics (ID: 266)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 266
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserStatistics (component_id: 266)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,033 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserStatistics - 'sql_query'
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserStatistics
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 10/22
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserAgeDistribution (select)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserAgeDistribution (select) -> SQL_SELECT
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserAgeDistribution', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 197, 'line_end': 237, 'hash_value': '48798a2aa3b92303512b3e5464ecaa3f', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserAgeDistribution (SQL_SELECT)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserAgeDistribution', 27)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserAgeDistribution', None, 'SQL', 27, 197, 237, '48798a2aa3b92303512b3e5464ecaa3f', 'N', None, 'N')
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 267
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserAgeDistribution (ID: 267)
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 267
2025-09-13 18:42:35,033 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserAgeDistribution (component_id: 267)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,034 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserAgeDistribution - 'sql_query'
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserAgeDistribution
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 11/22
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserActivityAnalysis (select)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserActivityAnalysis (select) -> SQL_SELECT
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserActivityAnalysis', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 237, 'line_end': 275, 'hash_value': '77cae977aa1d44c9e8a7601e14094a1e', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserActivityAnalysis (SQL_SELECT)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserActivityAnalysis', 27)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserActivityAnalysis', None, 'SQL', 27, 237, 275, '77cae977aa1d44c9e8a7601e14094a1e', 'N', None, 'N')
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 268
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserActivityAnalysis (ID: 268)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 268
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserActivityAnalysis (component_id: 268)
2025-09-13 18:42:35,034 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,035 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserActivityAnalysis - 'sql_query'
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserActivityAnalysis
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 12/22
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: searchUsersAdvanced (select)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: searchUsersAdvanced (select) -> SQL_SELECT
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'searchUsersAdvanced', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 275, 'line_end': 376, 'hash_value': '68dc1372759e82eef03607a8040fedfe', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: searchUsersAdvanced (SQL_SELECT)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'searchUsersAdvanced', 27)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'searchUsersAdvanced', None, 'SQL', 27, 275, 376, '68dc1372759e82eef03607a8040fedfe', 'N', None, 'N')
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 269
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: searchUsersAdvanced (ID: 269)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 269
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: searchUsersAdvanced (component_id: 269)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,035 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): searchUsersAdvanced - 'sql_query'
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: searchUsersAdvanced
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 13/22
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserGroupStatistics (select)
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,035 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserGroupStatistics (select) -> SQL_SELECT
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserGroupStatistics', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 376, 'line_end': 399, 'hash_value': 'ce17031785293bf8a8c68041e4cecf40', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserGroupStatistics (SQL_SELECT)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserGroupStatistics', 27)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserGroupStatistics', None, 'SQL', 27, 376, 399, 'ce17031785293bf8a8c68041e4cecf40', 'N', None, 'N')
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 270
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserGroupStatistics (ID: 270)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 270
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserGroupStatistics (component_id: 270)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,036 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserGroupStatistics - 'sql_query'
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserGroupStatistics
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 14/22
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserWithPreferences (select)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserWithPreferences (select) -> SQL_SELECT
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserWithPreferences', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 399, 'line_end': 419, 'hash_value': '6e212312a82ae6557da385dfa7af9cca', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserWithPreferences (SQL_SELECT)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserWithPreferences', 27)
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,036 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserWithPreferences', None, 'SQL', 27, 399, 419, '6e212312a82ae6557da385dfa7af9cca', 'N', None, 'N')
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 271
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserWithPreferences (ID: 271)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 271
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserWithPreferences (component_id: 271)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,037 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserWithPreferences - 'sql_query'
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserWithPreferences
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 15/22
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserWithPreferencesAndType (select)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserWithPreferencesAndType (select) -> SQL_SELECT
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserWithPreferencesAndType', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 419, 'line_end': 440, 'hash_value': '0c2705675ca57eaf3d612c8b53e6b3f2', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserWithPreferencesAndType (SQL_SELECT)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserWithPreferencesAndType', 27)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserWithPreferencesAndType', None, 'SQL', 27, 419, 440, '0c2705675ca57eaf3d612c8b53e6b3f2', 'N', None, 'N')
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 272
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserWithPreferencesAndType (ID: 272)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 272
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserWithPreferencesAndType (component_id: 272)
2025-09-13 18:42:35,037 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,037 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserWithPreferencesAndType - 'sql_query'
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserWithPreferencesAndType
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 16/22
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserActivityLog (select)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserActivityLog (select) -> SQL_SELECT
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserActivityLog', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 440, 'line_end': 455, 'hash_value': 'f7273adad5907e3d8a2abaa93a1341ec', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserActivityLog (SQL_SELECT)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserActivityLog', 27)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserActivityLog', None, 'SQL', 27, 440, 455, 'f7273adad5907e3d8a2abaa93a1341ec', 'N', None, 'N')
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 273
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserActivityLog (ID: 273)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 273
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserActivityLog (component_id: 273)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,038 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserActivityLog - 'sql_query'
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserActivityLog
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 17/22
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserSettings (select)
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,038 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserSettings (select) -> SQL_SELECT
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserSettings', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 455, 'line_end': 468, 'hash_value': '7ecf0fef56ccf6b1083217245b022413', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserSettings (SQL_SELECT)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserSettings', 27)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserSettings', None, 'SQL', 27, 455, 468, '7ecf0fef56ccf6b1083217245b022413', 'N', None, 'N')
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 274
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserSettings (ID: 274)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 274
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserSettings (component_id: 274)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,039 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserSettings - 'sql_query'
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserSettings
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 18/22
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: updateUserPreferences (update)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: updateUserPreferences (update) -> SQL_UPDATE
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_UPDATE', 'component_name': 'updateUserPreferences', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 468, 'line_end': 481, 'hash_value': 'dca68664b8114aabe1841abd2a62f216', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: updateUserPreferences (SQL_UPDATE)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'updateUserPreferences', 27)
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_UPDATE', 'updateUserPreferences', None, 'SQL', 27, 468, 481, 'dca68664b8114aabe1841abd2a62f216', 'N', None, 'N')
2025-09-13 18:42:35,039 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 275
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: updateUserPreferences (ID: 275)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 275
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: updateUserPreferences (component_id: 275)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,040 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): updateUserPreferences - 'sql_query'
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: updateUserPreferences
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 19/22
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: insertUserPreferences (insert)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: insertUserPreferences (insert) -> SQL_INSERT
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_INSERT', 'component_name': 'insertUserPreferences', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 481, 'line_end': 504, 'hash_value': '07bdfcb2b387057750d3ce5cc2647bbd', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: insertUserPreferences (SQL_INSERT)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'insertUserPreferences', 27)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_INSERT', 'insertUserPreferences', None, 'SQL', 27, 481, 504, '07bdfcb2b387057750d3ce5cc2647bbd', 'N', None, 'N')
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 276
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: insertUserPreferences (ID: 276)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 276
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: insertUserPreferences (component_id: 276)
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,040 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): insertUserPreferences - 'sql_query'
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: insertUserPreferences
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 20/22
2025-09-13 18:42:35,040 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: getUserWithNewTable (select)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: getUserWithNewTable (select) -> SQL_SELECT
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_SELECT', 'component_name': 'getUserWithNewTable', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 504, 'line_end': 517, 'hash_value': '4d1afbb77338d8fb7e15f76eba13ce41', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: getUserWithNewTable (SQL_SELECT)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'getUserWithNewTable', 27)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_SELECT', 'getUserWithNewTable', None, 'SQL', 27, 504, 517, '4d1afbb77338d8fb7e15f76eba13ce41', 'N', None, 'N')
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 277
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: getUserWithNewTable (ID: 277)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 277
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: getUserWithNewTable (component_id: 277)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,041 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): getUserWithNewTable - 'sql_query'
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: getUserWithNewTable
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 21/22
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: mergeUserStatistics (merge)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: mergeUserStatistics (merge) -> SQL_MERGE
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_MERGE', 'component_name': 'mergeUserStatistics', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 517, 'line_end': 538, 'hash_value': 'd8d09add81ee64f6a2004e68031c1349', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: mergeUserStatistics (SQL_MERGE)
2025-09-13 18:42:35,041 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'mergeUserStatistics', 27)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_MERGE', 'mergeUserStatistics', None, 'SQL', 27, 517, 538, 'd8d09add81ee64f6a2004e68031c1349', 'N', None, 'N')
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 278
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: mergeUserStatistics (ID: 278)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 278
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: mergeUserStatistics (component_id: 278)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,042 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): mergeUserStatistics - 'sql_query'
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: mergeUserStatistics
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 루프 시작: 22/22
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 시작: mergeUserActivityLog (merge)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - GET XML ID 조회: D:\Analyzer\CreateMetaDb\projects\sampleSrc\src\main\resources\mybatis\mapper\UserMapper.xml -> src/main/resources/mybatis/mapper/UserMapper.xml
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리 매핑 테이블 키들: ['src/com/example/dynamicquery/UserMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinMapper.xml', 'src/main/resources/mybatis/mapper/ImplicitJoinTestMapper.xml', 'src/main/resources/mybatis/mapper/MixedErrorMapper.xml', 'src/main/resources/mybatis/mapper/ProductMapper.xml', 'src/main/resources/mybatis/mapper/UserMapper.xml']
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 메모리에서 file_id 조회 성공: src/main/resources/mybatis/mapper/UserMapper.xml -> 27
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 파일 ID 조회 성공: 27
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 시도: mergeUserActivityLog (merge) -> SQL_MERGE
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'SQL_MERGE', 'component_name': 'mergeUserActivityLog', 'parent_id': None, 'layer': 'SQL', 'file_id': 27, 'line_start': 538, 'line_end': 557, 'hash_value': '0bf2431d425926b97609e8584071eb3b', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: mergeUserActivityLog (SQL_MERGE)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'mergeUserActivityLog', 27)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, layer, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'SQL_MERGE', 'mergeUserActivityLog', None, 'SQL', 27, 538, 557, '0bf2431d425926b97609e8584071eb3b', 'N', None, 'N')
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 279
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 완료: mergeUserActivityLog (ID: 279)
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - 컴포넌트 저장 결과: component_id = 279
2025-09-13 18:42:35,042 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 저장 시작: mergeUserActivityLog (component_id: 279)
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - SQL Content 상대경로: src/main/resources/mybatis/mapper
2025-09-13 18:42:35,043 - SourceAnalyzer - WARNING - logger.py:72 - SQL Content 저장 중 예외 발생 (무시하고 계속 진행): mergeUserActivityLog - 'sql_query'
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - SQL 쿼리 처리 완료: mergeUserActivityLog
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - === SQL 쿼리 처리 완료 ===
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - 처리된 쿼리 수: 22
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - 건너뜀 쿼리 수: 0
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - 컴포넌트 ID 매핑 크기: 22
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - SQL 컴포넌트 저장 완료: 22개 (건너뜀: 0개)
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - process_sql_queries 호출 후: result=True
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - SQL Content Processor 처리 결과: True
2025-09-13 18:42:35,043 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 엔진: SQL 컴포넌트 저장 완료 ===
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,043 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: USER_ACTIVITY_LOG
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'USER_ACTIVITY_LOG', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'USER_ACTIVITY_LOG', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 42
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_ACTIVITY_LOG', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_ACTIVITY_LOG', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: USER_ACTIVITY_LOG (TABLE)
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'USER_ACTIVITY_LOG', 5)
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'USER_ACTIVITY_LOG', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:35,044 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 280
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 280
2025-09-13 18:42:35,044 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=280, table_id=42
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 USER_ACTIVITY_LOG에 대한 조인 필드가 없습니다
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: USER_ACTIVITY_LOG, component_id: 280
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: USER_ACTIVITY_LOG (ID: 280)
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: USER_SETTINGS
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'USER_SETTINGS', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'USER_SETTINGS', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 43
2025-09-13 18:42:35,045 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_SETTINGS', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'USER_SETTINGS', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: USER_SETTINGS (TABLE)
2025-09-13 18:42:35,045 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'USER_SETTINGS', 5)
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'USER_SETTINGS', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 281
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 281
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=281, table_id=43
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 USER_SETTINGS에 대한 조인 필드가 없습니다
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: USER_SETTINGS, component_id: 281
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: USER_SETTINGS (ID: 281)
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT c.component_id 
          ...
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 시도: NEW_TEST_TABLE
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
                SELECT file_id 
                F...
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블용 file_id 찾음: 5
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_id': None, 'table_name': 'NEW_TEST_TABLE', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: tables
2025-09-13 18:42:35,046 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_id': None, 'table_name': 'NEW_TEST_TABLE', 'table_owner': 'UNKNOWN', 'table_comments': 'Inferred from SQL analysis', 'has_error': 'N', 'error_message': None, 'hash_value': 'INFERRED', 'del_yn': 'N'}
2025-09-13 18:42:35,046 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 삽입 결과: 44
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - components 테이블에 데이터 삽입 시도: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'NEW_TEST_TABLE', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - Upsert 실행: components
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터: {'project_id': 1, 'component_type': 'TABLE', 'component_name': 'NEW_TEST_TABLE', 'parent_id': None, 'file_id': 5, 'line_start': None, 'line_end': None, 'hash_value': 'INFERRED', 'has_error': 'N', 'error_message': None, 'del_yn': 'N'}
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - Components upsert 시작: NEW_TEST_TABLE (TABLE)
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 확인 쿼리: 
                    SELECT component_id FROM components 
                    WHERE project_id = ? AND component_name = ? AND file_id = ?
                    
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 파라미터: (1, 'NEW_TEST_TABLE', 5)
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 기존 레코드 조회 결과: None
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 쿼리: 
                        INSERT INTO components (project_id, component_type, component_name, parent_id, file_id, line_start, line_end, hash_value, has_error, error_message, del_yn)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 파라미터: (1, 'TABLE', 'NEW_TEST_TABLE', None, 5, None, None, 'INFERRED', 'N', None, 'N')
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - INSERT 실행 완료: component_id = 282
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - components 테이블 삽입 결과: 282
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 시도: component_id=282, table_id=44
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 업데이트 쿼리 실행 성공: 
            UPDATE tables
            SET compone..., 영향받은 행: 1
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - tables 테이블 업데이트 완료
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 테이블 NEW_TEST_TABLE에 대한 조인 필드가 없습니다
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 완료: NEW_TEST_TABLE, component_id: 282
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - inferred 테이블 생성 성공: NEW_TEST_TABLE (ID: 282)
2025-09-13 18:42:35,047 - SourceAnalyzer - DEBUG - logger.py:64 - 배치 쿼리 실행 성공: 
            INSERT OR IGNORE INTO relationships (..., 처리된 행: 8
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - JOIN 관계 저장 완료: 8개
2025-09-13 18:42:35,047 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 통계 ===
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 처리된 XML 파일: 5개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 추출된 SQL 쿼리: 56개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 생성된 SQL 컴포넌트: 56개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 생성된 JOIN 관계: 30개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 생성된 inferred 테이블: 12개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 생성된 inferred 컬럼: 0개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 오류 발생: 1개
2025-09-13 18:42:35,048 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
            SELECT 
                COUNT(*) as t...
2025-09-13 18:42:35,048 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
            SELECT 
                file_path, fi...
2025-09-13 18:42:35,048 - SourceAnalyzer - DEBUG - logger.py:64 - 쿼리 실행 성공: 
            SELECT 
                query_type,
 ...
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - === SQL Content 통계 ===
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 저장된 SQL 내용: 0개
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 총 압축 크기: None bytes
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 평균 압축 크기: 0.00 bytes
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 최대 압축 크기: None bytes
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - 최소 압축 크기: None bytes
2025-09-13 18:42:35,048 - SourceAnalyzer - INFO - logger.py:68 - === XML 로딩 완료 ===
2025-09-13 18:42:35,053 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 해제: D:\Analyzer\CreateMetaDb\projects\sampleSrc\metadata.db
2025-09-13 18:42:35,053 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 해제: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:35,053 - SourceAnalyzer - INFO - logger.py:68 - SQL Content 데이터베이스 연결 해제
2025-09-13 18:42:35,054 - SourceAnalyzer - DEBUG - logger.py:64 - 데이터베이스 연결 해제: D:\Analyzer\CreateMetaDb\projects\sampleSrc\SqlContent.db
2025-09-13 18:42:35,054 - SourceAnalyzer - INFO - logger.py:68 - SQL Content 데이터베이스 연결 해제
2025-09-13 18:42:35,054 - SourceAnalyzer - INFO - logger.py:68 - 3단계 완료: XML 파일 분석 및 SQL 컴포넌트 등록 + JOIN 관계 분석
2025-09-13 18:42:35,054 - SourceAnalyzer - INFO - logger.py:68 - 1-3단계 테스트 완료
