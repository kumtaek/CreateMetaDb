"""
Architecture Report HTML 템플릿 관리
"""

from typing import Dict, List, Any


class ArchitectureTemplates:
    """Architecture Report 템플릿 관리 클래스"""
    
    def get_architecture_template(self, project_name: str, timestamp: str, stats: Dict[str, int], 
                                layer_data: Dict[str, List[Dict[str, Any]]], relationships: Dict[str, List[Dict[str, Any]]]) -> str:
        """Architecture Report HTML 템플릿 생성 (오프라인 지원, SVG 기반)"""
        
        # 통계 카드 HTML 생성
        stats_html = self._generate_architecture_stats_html(stats)
        
        # 아키텍처 다이어그램 SVG 생성
        diagram_svg = self._generate_architecture_diagram_svg(layer_data)
        
        # 관계 분석 HTML 생성
        relationships_html = self._generate_relationships_html(relationships)
        
        return f"""<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>시스템 아키텍처 분석 리포트 - {project_name}</title>
    <style>
        {self._get_architecture_css()}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>시스템 아키텍처 분석</h1>
            <div class="subtitle">System Architecture Analysis Report</div>
            <div class="subtitle">생성일시: {timestamp}</div>
        </div>
        
        <div class="section">
            <h2>아키텍처 구조 다이어그램</h2>
            <div class="diagram-container">
                {diagram_svg}
            </div>
        </div>
        
        {relationships_html}
        
        {stats_html}
        
        <div class="timestamp">
            Generated by SourceAnalyzer Architecture Reporter | {timestamp}
        </div>
    </div>
    
    <script>
        {self._get_architecture_javascript()}
    </script>
</body>
</html>"""
    
    def _generate_architecture_stats_html(self, stats: Dict[str, int]) -> str:
        """아키텍처 통계 카드 HTML 생성"""
        return f"""
        <div class="section">
            <h2>구성 요소 통계</h2>
            <table class="stats-table">
                <thead>
                    <tr>
                        <th>컴포넌트 타입</th>
                        <th>수량</th>
                        <th>설명</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>클래스</td>
                        <td>{stats.get('total_classes', 0)}개</td>
                        <td>Java 클래스 파일</td>
                    </tr>
                    <tr>
                        <td>테이블</td>
                        <td>{stats.get('total_tables', 0)}개</td>
                        <td>데이터베이스 테이블</td>
                    </tr>
                    <tr style="font-weight:bold;background-color:#e3f2fd;">
                        <td>전체</td>
                        <td>{stats.get('total_classes', 0) + stats.get('total_tables', 0)}개</td>
                        <td>총 컴포넌트 수</td>
                    </tr>
                </tbody>
            </table>
        </div>"""
    
    def _generate_architecture_diagram_svg(self, layer_data: Dict[str, List[Dict[str, Any]]]) -> str:
        """SVG 기반 아키텍처 다이어그램 생성 (오프라인 지원)"""
        try:
            # 레이어별 컴포넌트 수 계산
            controller_count = len(layer_data.get('controller', []))
            service_count = len(layer_data.get('service', []))
            mapper_count = len(layer_data.get('mapper', []))
            model_count = len(layer_data.get('model', []))
            
            # SVG 다이어그램 생성
            svg_content = f"""<svg width="100%" height="500" viewBox="0 0 1000 500">
                <!-- Controller Layer -->
                <rect x="50" y="50" width="900" height="80" 
                      fill="#e1f5fe" stroke="#01579b" 
                      stroke-width="2" rx="10"/>
                <text x="500" y="70" text-anchor="middle" 
                      fill="#01579b" font-weight="bold" font-size="14">
                      Controller Layer</text>
                
                {self._generate_layer_components_svg(layer_data.get('controller', []), 80, 85, '#01579b')}
                
                <!-- Service Layer -->
                <rect x="50" y="150" width="900" height="80" 
                      fill="#f3e5f5" stroke="#4a148c" 
                      stroke-width="2" rx="10"/>
                <text x="500" y="170" text-anchor="middle" 
                      fill="#4a148c" font-weight="bold" font-size="14">
                      Service Layer</text>
                
                {self._generate_layer_components_svg(layer_data.get('service', []), 180, 185, '#4a148c')}
                
                <!-- Mapper Layer -->
                <rect x="50" y="250" width="900" height="80" 
                      fill="#e8f5e8" stroke="#1b5e20" 
                      stroke-width="2" rx="10"/>
                <text x="500" y="270" text-anchor="middle" 
                      fill="#1b5e20" font-weight="bold" font-size="14">
                      Mapper Layer</text>
                
                {self._generate_layer_components_svg(layer_data.get('mapper', []), 280, 285, '#1b5e20')}
                
                <!-- Model Layer -->
                <rect x="50" y="350" width="900" height="80" 
                      fill="#fff3e0" stroke="#e65100" 
                      stroke-width="2" rx="10"/>
                <text x="500" y="370" text-anchor="middle" 
                      fill="#e65100" font-weight="bold" font-size="14">
                      Model Layer</text>
                
                {self._generate_layer_components_svg(layer_data.get('model', []), 380, 385, '#e65100')}
                
                <!-- Layer Arrows -->
                <defs>
                    <marker id="layer-arrow" markerWidth="10" markerHeight="7" 
                            refX="10" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#333"/>
                    </marker>
                </defs>
                <line x1="500" y1="130" x2="500" y2="150" 
                      stroke="#333" stroke-width="2" marker-end="url(#layer-arrow)"/>
                <line x1="500" y1="230" x2="500" y2="250" 
                      stroke="#333" stroke-width="2" marker-end="url(#layer-arrow)"/>
                <line x1="500" y1="330" x2="500" y2="350" 
                      stroke="#333" stroke-width="2" marker-end="url(#layer-arrow)"/>
            </svg>"""
            
            return svg_content
            
        except Exception as e:
            # app_logger가 없으므로 print로 대체
            print(f"SVG 다이어그램 생성 실패: {str(e)}")
            return """<svg width="100%" height="500" viewBox="0 0 1000 500">
                <rect x="50" y="50" width="900" height="400" fill="#f5f5f5" stroke="#ccc" stroke-width="2" rx="10"/>
                <text x="500" y="250" text-anchor="middle" fill="#666" font-size="16">다이어그램 생성 중 오류 발생</text>
            </svg>"""
    
    def _generate_layer_components_svg(self, components: List[Dict[str, Any]], layer_y: int, component_y: int, stroke_color: str) -> str:
        """레이어별 컴포넌트 SVG 생성"""
        if not components:
            return ""
        
        svg_elements = []
        max_components_per_row = 8
        component_width = 100
        component_height = 25
        start_x = 80
        spacing = 10
        
        for i, component in enumerate(components[:max_components_per_row]):
            x = start_x + i * (component_width + spacing)
            component_name = component.get('component_name', 'Unknown')
            
            # 컴포넌트명 길이 제한 (12자)
            display_name = component_name[:12] + '...' if len(component_name) > 12 else component_name
            
            svg_elements.append(f"""
                <rect x="{x}" y="{component_y}" width="{component_width}" height="{component_height}" 
                      fill="white" stroke="{stroke_color}" rx="3"/>
                <text x="{x + component_width//2}" y="{component_y + component_height//2 + 3}" text-anchor="middle" 
                      fill="#333" font-size="9">{display_name}</text>""")
        
        return ''.join(svg_elements)
    
    def _generate_relationships_html(self, relationships: Dict[str, List[Dict[str, Any]]]) -> str:
        """관계 분석 HTML 생성"""
        dependency_html = self._generate_relationship_card_html("의존성 관계", relationships.get('dependency', []))
        implementation_html = self._generate_relationship_card_html("구현 관계", relationships.get('implementation', []))
        call_html = self._generate_relationship_card_html("호출 관계", relationships.get('call', []))
        
        return f"""
        <div class="section">
            <h2>컴포넌트 관계 분석</h2>
            <div class="relationship-grid">
                {dependency_html}
                {implementation_html}
                {call_html}
            </div>
        </div>"""
    
    def _generate_relationship_card_html(self, title: str, relationships: List[Dict[str, Any]]) -> str:
        """관계 카드 HTML 생성"""
        relationship_items = []
        for rel in relationships:
            src = rel.get('src_component', 'Unknown')
            dst = rel.get('dst_component', 'Unknown')
            relationship_items.append(f'<div class="relationship-item">{src} ➜ {dst}</div>')
        
        return f"""
        <div class="relationship-card">
            <div class="relationship-header">{title} ({len(relationships)}개)</div>
            <div class="relationship-body">
                {''.join(relationship_items)}
            </div>
        </div>"""
    
    def _get_architecture_css(self) -> str:
        """Architecture Report CSS 스타일 (크로스플랫폼 호환)"""
        return """
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 15px;
            background-color: #f5f5f5;
            line-height: 1.6;
        }
        .container {
            max-width: 95%;
            margin: 0 auto;
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #007acc;
        }
        .header h1 {
            color: #007acc;
            margin: 0;
            font-size: 2.2em;
        }
        .header .subtitle {
            color: #666;
            font-size: 1.1em;
            margin-top: 10px;
        }
        .section {
            margin: 30px 0;
            padding: 20px;
            border-left: 4px solid #007acc;
            background-color: #f8f9fa;
        }
        .section h2 {
            color: #007acc;
            margin-top: 0;
            font-size: 1.6em;
        }
        .diagram-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow-x: auto;
        }
        .stats-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .stats-table th, .stats-table td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        .stats-table th {
            background-color: #007acc;
            color: white;
            font-weight: bold;
        }
        .stats-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .relationship-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .relationship-card {
            background: white;
            border: 2px solid #28a745;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .relationship-header {
            background: #28a745;
            color: white;
            padding: 15px;
            font-weight: bold;
            text-align: center;
        }
        .relationship-body {
            padding: 15px;
            max-height: 300px;
            overflow-y: auto;
        }
        .relationship-item {
            margin: 5px 0;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 4px;
            font-size: 0.9em;
        }
        .timestamp {
            text-align: center;
            color: #666;
            font-size: 0.9em;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
        }
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 15px;
            }
            .header h1 {
                font-size: 1.8em;
            }
            .relationship-grid {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _get_architecture_javascript(self) -> str:
        """Architecture Report JavaScript (오프라인 지원)"""
        return """
        // 오프라인 환경 지원을 위한 JavaScript
        // 외부 라이브러리 의존성 없이 순수 JavaScript로 구현
        
        // 다이어그램 확대/축소 기능
        function zoomDiagram(scale) {
            const svg = document.querySelector('svg');
            if (svg) {
                svg.style.transform = `scale(${scale})`;
                svg.style.transformOrigin = 'center center';
            }
        }
        
        // 다이어그램 초기화
        document.addEventListener('DOMContentLoaded', function() {
            // SVG 반응형 처리
            const svg = document.querySelector('svg');
            if (svg) {
                svg.style.maxWidth = '100%';
                svg.style.height = 'auto';
            }
        });
        
        // 키보드 단축키 지원
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case '=':
                    case '+':
                        e.preventDefault();
                        zoomDiagram(1.2);
                        break;
                    case '-':
                        e.preventDefault();
                        zoomDiagram(0.8);
                        break;
                    case '0':
                        e.preventDefault();
                        zoomDiagram(1);
                        break;
                }
            }
        });
        """
